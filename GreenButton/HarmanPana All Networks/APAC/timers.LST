C51 COMPILER V9.51   TIMERS                                                                06/13/2016 08:38:17 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE TIMERS
OBJECT MODULE PLACED IN timers.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe timers.c DB OE BR INCDIR(C:\SiLabs\MCU\Inc)

line level    source

   1          #include "c8051F040.h"
   2          #include "stdlib.h"
   3          #include "string.h"
   4          #include "stdio.h"
   5          #include "main.h"
   6          
   7          //U16 OneSecConst;
   8          U32 msticks;
   9          extern bit RxCAN1;
  10          extern U8 xdata RelayChange;
  11          extern U16 xdata RelayCnf[4];
  12          extern MSGTABLE xdata *Mesgs;
  13          extern U8 xdata MesgCnt;
  14          extern CANFRAME xdata txframe;
  15          extern CANFRAME xdata OneTime[3];
  16          
  17          bit IGN_OFF_FLG;
  18          
  19          void Oscillator_Init(void)
  20          {
  21   1              char    SFPRPAGE_SAVE = SFRPAGE;        // Save Current SFR Page
  22   1      
  23   1              ////////////////////////////////////////
  24   1              // switch to external oscillator
  25   1              ////////////////////////////////////////
  26   1              SFRPAGE = CONFIG_PAGE;  // switch to config page to config oscillator
  27   1              
  28   1              OSCXCN  = 0x67;     // start external oscillator; 18.0/24.0 MHz Crystal
  29   1              codedelay(255);         // delay about 1ms  
  30   1      
  31   1              while ((OSCXCN & 0x80) == 0);   
  32   1      
  33   1              CLKSEL |= 0x01;         // switch to external oscillator
  34   1      
  35   1              SFRPAGE = SFPRPAGE_SAVE;        // Restore SFR page
  36   1      }
  37          
  38          // MilliSec Delay -  delay function
  39          void mSecDelay(unsigned int delay)
  40          {
  41   1              delay = delay + (int)msticks;
  42   1      
  43   1                                                                                                              // did delay wrap low? then
  44   1              while (delay < (int)msticks && !RxCAN1)                 // wait till msticks wraps once
  45   1              ;                                                                                               // delay should be > msticks to start
  46   1      
  47   1              while ((int)msticks < delay && !RxCAN1)                 // wait for msticks >= delay
  48   1              ;
  49   1      }
  50          
  51          void codedelay(unsigned int delay)
  52          {
  53   1              while (delay && !RxCAN1)
  54   1              {
  55   2                      delay--;
C51 COMPILER V9.51   TIMERS                                                                06/13/2016 08:38:17 PAGE 2   

  56   2              }
  57   1      } 
  58          
  59          
  60          // Start Timer3
  61          void Start_Timer3(U16 OneSecConst)
  62          {
  63   1              unsigned int Reload;
  64   1      
  65   1              // Configure Timer3 to auto-reload and generate an interrupt at interval
  66   1              // specified by <counts> using SYSCLK/12 as its time base.
  67   1              SFRPAGE = TMR3_PAGE;                            // Switch to Timer 3 page
  68   1      
  69   1              Reload = SYSCLK / OneSecConst;
  70   1      //      Reload = SYSCLK * .000256;
  71   1              TMR3CN = 0x00;                                  // Stop Timer3; Clear TF3;
  72   1              TMR3CF = 0x8;                           // use SYSCLK as timebase GLB
  73   1      
  74   1              RCAP3   = -Reload;                                      // Init reload values
  75   1              TMR3    = 0xffff;                               // set to reload immediately
  76   1      
  77   1              // debug - Timer3 high priority
  78   1              //EIP2 |= 0x01;
  79   1      
  80   1              EIE2 |= 0x01;                                   // enable Timer3 interrupts
  81   1              TR3 = 1;                                        // start Timer3
  82   1                                                                                              // Init Timer3 to generate interrupts - 256uSec,
  83   1                                                                                              // (4608 ticks @18M) or (6144 @24M)
  84   1                                                                                              // use SYSCLK instead of SYSCLK/12 for accuracy
  85   1                                                                                              // This leads to msticks being bytes 4-1 of 5 byte timer
  86   1                                                                                              // byte 0 is TMR3 / 18 (GLB)
  87   1              msticks = 0;
  88   1      }
  89          
  90          extern U32 keys,keyChange;
  91          void INT_T3_OV() interrupt 14                                   // Timer 3 overflow
  92          {
  93   1              TF3 = 0;                                                // clear TF3
  94   1              msticks++;
  95   1      
  96   1              ReadInputs();                                                           // read input selects and buttons.
  97   1      
  98   1              CheckMesgs();
  99   1      }
 100          
 101          
 102          U8 Rotary2value(U8 inbits,U8 old)
 103          {
 104   1              switch (inbits)
 105   1                      {
 106   2                      case 1:
 107   2                              inbits = 5;
 108   2                              break;
 109   2                      case 2:
 110   2                              inbits = 6;
 111   2                              break;
 112   2                      case 4:
 113   2                              inbits = 7;
 114   2                              break;
 115   2                      case 8:
 116   2                              inbits = 8;
 117   2                              break;
C51 COMPILER V9.51   TIMERS                                                                06/13/2016 08:38:17 PAGE 3   

 118   2                      case 0x10:
 119   2                              inbits = 1;
 120   2                              break;
 121   2                      case 0x20:
 122   2                              inbits = 2;
 123   2                              break;
 124   2                      case 0x40:
 125   2                              inbits = 3;
 126   2                              break;
 127   2                      case 0x80:
 128   2                              inbits = 4;
 129   2                              break;
 130   2                      default:
 131   2                              inbits =old;
 132   2                      }
 133   1              return (inbits);
 134   1      }
 135          
 136          void ReadInputs()
 137          {
 138   1              U32 Col1,Col2;
 139   1              U16 col;
 140   1              U8 Ign,Soft;
 141   1              U8 port1,port2,port3,temp;
 142   1      
 143   1              // Read Row 1 of buttons and Read Ignition Rotary
 144   1              ROW1 = 0;
 145   1              ROTARY_IGN = 0;
 146   1              codedelay(50);
 147   1      
 148   1              port1 = P1;
 149   1              port2 = P2; 
 150   1              port3 = P3;
 151   1              ROW1 = 1;
 152   1              ROTARY_IGN = 1;
 153   1      
 154   1              col = (U16)port1 + ((U16)(port2&0x3)<<8);
 155   1              Col1 = (U32)(((~col) & 0x3FF))<<18;
 156   1      
 157   1              temp = (port2 & 0xF0) + (port3 & 0xF);
 158   1              Ign = Rotary2value(~temp,((keys>>4)&0xF));
 159   1      
 160   1              // Read Row 2 of buttons and Read Soft Rotary
 161   1              ROW2 = 0;
 162   1              ROTARY_SOFT = 0;
 163   1              codedelay(50);
 164   1              
 165   1              port1 = P1;
 166   1              port2 = P2; 
 167   1              port3 = P3;
 168   1              ROW2 = 1;
 169   1              ROTARY_SOFT = 1;
 170   1      
 171   1              col = port1 + ((port2&0x3)<<8);
 172   1              Col2 = (U32)(((~col) & 0x3FF))<<8;
 173   1      
 174   1              temp = (port2 & 0xF0) + (port3 & 0xF);
 175   1              Soft = Rotary2value(~temp,(keys&0xF));
 176   1      
 177   1              keyChange |= keys ^ (Col1+Col2+((U32)Ign<<4)+(U32)Soft);        // set new changes
 178   1              keys = Col1+Col2+((U32)Ign<<4)+(U32)Soft;
 179   1      }
C51 COMPILER V9.51   TIMERS                                                                06/13/2016 08:38:17 PAGE 4   

 180          
 181          
 182          void CheckMesgs()
 183          {
 184   1              U8 i,j,port;
 185   1              bit found = 0;
 186   1      
 187   1              for (i = 0 ; i < TXBUFFS ; i++)
 188   1              {
 189   2                      if (OneTime[i].arbID)
 190   2                      {
 191   3                              if (OneTime[i].arbID & PORTFLG)
 192   3                                      port = 1;
 193   3                              else port = 0;
 194   3                              txframe.arbID = (OneTime[i].arbID & 0x9FFFFFFF);
 195   3                              txframe.sz = OneTime[i].sz;
 196   3                              for (j = 0 ; j < txframe.sz ; j++)
 197   3                                      txframe.cdat[j] = OneTime[i].cdat[j];
 198   3      
 199   3                              TxFrame(port);
 200   3                              OneTime[i].arbID = 0;
 201   3                              found = 1;
 202   3                      }
 203   2              }
 204   1      
 205   1              for (i = 0 ; i < MesgCnt ; i++)
 206   1              {
 207   2                      if ((Mesgs+i)->Rate <= (Mesgs+i)->ticks && !found)      // output
 208   2                      {
 209   3                              (Mesgs+i)->ticks=0;
 210   3      
 211   3                              if ((Mesgs+i)->ID & PORTFLG) port = 1; else port = 0;
 212   3                              txframe.arbID = (Mesgs+i)->ID & 0x9FFFFFFF;                                                                                             
 213   3                              txframe.sz = (Mesgs+i)->cnt;
 214   3                              for (j = 0 ; j < txframe.sz ; j++)
 215   3                                      txframe.cdat[j] = (Mesgs+i)->dat[j];
 216   3      
 217   3                              /////////////////////////////////////////////////////////////////////////////////////////////////////
 218   3                              if (IGN_OFF_FLG)
 219   3                              {
 220   4                                      TxFrame(port);
 221   4                                      found = 1;
 222   4                              }
 223   3      
 224   3                              if ((Mesgs+i)->Altered)
 225   3                              {
 226   4                                      if ((Mesgs+i)->Altered != 0xFF) // not held data
 227   4                                      {
 228   5                                              (Mesgs+i)->Altered--;
 229   5                                              if (!(Mesgs+i)->Altered)        // time to restore data
 230   5                                              {
 231   6                                                      for (j = 0 ; j < (Mesgs+i)->cnt ; j++)
 232   6                                                              (Mesgs+i)->dat[j] = (Mesgs+i)->Restore[j];
 233   6                                              }
 234   5                                      }
 235   4                              }
 236   3      
 237   3                              for (j = 0 ; j < 4 ; j++)
 238   3                              {
 239   4                                      if ((RelayCnf[j]&0xF00) == REL_TX) // Relay configured to TxMesg
 240   4                                      {
 241   5                                              if ((RelayCnf[j]&0xFF) == i)            // outputing correct message
C51 COMPILER V9.51   TIMERS                                                                06/13/2016 08:38:17 PAGE 5   

 242   5                                                      RelayChange |= 1<<j;                    // flag for relay change
 243   5                                      }
 244   4                              }
 245   3                      }
 246   2                      else
 247   2                              (Mesgs+i)->ticks++;
 248   2              }
 249   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1485    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
