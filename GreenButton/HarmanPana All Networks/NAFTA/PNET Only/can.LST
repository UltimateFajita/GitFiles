C51 COMPILER V9.51   CAN                                                                   09/19/2016 15:58:03 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CAN
OBJECT MODULE PLACED IN can.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe can.c DB OE BR INCDIR(C:\SiLabs\MCU\Inc)

line level    source

   1          #include "c8051F040.h"
   2          #include "stdlib.h"
   3          #include "string.h"
   4          #include "stdio.h"
   5          #include "main.h"
   6          #include "spi.h"
   7          
   8          extern CANFRAME xdata rxframe0[RX0BUFFERS];
   9          extern CANFRAME xdata rxframe1[RX1BUFFERS];
  10          
  11          unsigned char xdata IntReg;
  12          //unsigned long accumulator[ANALOG_INPUTS] = {0L};      // for integrated ADC samples
  13          extern bit CANintMode,RxCAN0;
  14          extern xdata CANFRAME txframe;
  15          extern U32 xdata RxCAN1IDs[RX1BUFFERS];
  16          U8 xdata RxBuffCnt[2];
  17          
  18          /****************************************************************************
  19          * Name: TxFrame
  20          *  
  21          * Description:  Transmit single can message in txframe out port 
  22          * Parameters:
  23          *               port - CAN port 0 or 1
  24          *               
  25          *****************************************************************************/
  26          void TxFrame(U8 port)   // Tx for both CAN ports
  27          {
  28   1              U8 TxBuff;
  29   1      
  30   1              if (port == 0)
  31   1              {
  32   2                      txframe.MsgNum = 32;    // last MsgObj is for Tx
  33   2                      tx_can_frame(0);
  34   2              }
  35   1              if (port == 1)
  36   1              {
  37   2                      if (CAN1getNextFreeTXBuf(&TxBuff) != MCP_ALLTXBUSY)
  38   2                      {
  39   3                              CAN1write_canMsg( TxBuff );
  40   3                              CAN1start_transmit( TxBuff );              
  41   3                      }
  42   2              }
  43   1      }
  44          
  45          /****************************************************************************
  46          * Name: initRxFrameID
  47          *  
  48          * Description:  initilize a Rx recieve buffer to trap a particular ID
  49          * Parameters:
  50          *               port    - CAN port 0 or 1
  51          *               MsgNum  - # 0-31 of allowable Message buffers.
  52          *               arbID   - arbitration ID of message desired     
  53          *               
  54          *****************************************************************************/
  55          U8 initRxFrameID(U8 port,U32 arbID)     // Rx for both CAN ports
C51 COMPILER V9.51   CAN                                                                   09/19/2016 15:58:03 PAGE 2   

  56          {
  57   1              U8 i;
  58   1              CANFRAME *rx;
  59   1              U8 BuffSize;
  60   1      
  61   1              if (!port)
  62   1              {
  63   2                      rx = &rxframe0;
  64   2                      BuffSize = RX0BUFFERS;
  65   2              }
  66   1              else
  67   1              {
  68   2                      rx = &rxframe1;
  69   2                      BuffSize = RX1BUFFERS;
  70   2              }
  71   1      
  72   1              for (i = (port)?(0):(1) ; i < RxBuffCnt[port] && (rx+i)->arbID != arbID ; i++);
  73   1      
  74   1              if (i < BuffSize && (rx+i)->arbID != arbID)     // not already set
  75   1              {
  76   2                      (rx+i)->arbID = arbID;  // set place holder
  77   2                      if (port == 0)
  78   2                      {
  79   3                              init_msg_object_rx (i, arbID);
  80   3                      }
  81   2                      if (port == 1)
  82   2                      {
  83   3                              RxCAN1IDs[i] = arbID;
  84   3                              EX0 = 1;        // enable CAN1 interupt
  85   3                      }
  86   2                      RxBuffCnt[port]++;
  87   2              }
  88   1      
  89   1      i |= (port)?(0x80):(0);
  90   1      return(i);
  91   1      } 
  92          
  93          
  94          /****************************************************************************
  95          * Name: clear_message_object
  96          *  
  97          * Description:  Clear Message Objects
  98          * Parameters:             
  99          *               port    - CAN port 0 or 1
 100          *               mesgobj - # 0-31 of allowable Message buffers. first mesgobj
 101          *               count   - following msgobj to also clear 0-31   
 102          *                                     
 103          *****************************************************************************/
 104          void clear_message_object (U8 port, unsigned char mesgobj,unsigned char count) 
 105          {
 106   1              U8 BuffSize;
 107   1      
 108   1              if (port == 0)
 109   1              {
 110   2                      SFRPAGE = CAN0_PAGE;
 111   2                      CAN0ADR = IF1CMDMSK;                            //Point to Command Mask Register 1
 112   2                      CAN0DATL = 0xFF;                                //Set direction to WRITE all IF registers to Msg Obj
 113   2                      BuffSize = RX0BUFFERS;
 114   2              }
 115   1              else
 116   1                      BuffSize = RX1BUFFERS;
 117   1      
C51 COMPILER V9.51   CAN                                                                   09/19/2016 15:58:03 PAGE 3   

 118   1              while (mesgobj < BuffSize && count)
 119   1              {
 120   2                      if (port == 0)
 121   2                      {
 122   3                              CAN0ADR = IF1CMDRQST;                           //Write blank IF registers to GLOBAL msg obj
 123   3                              CAN0DATL = mesgobj;
 124   3                              rxframe0[mesgobj].arbID = 0xFFFFFFFF;
 125   3                              rxframe0[mesgobj].MsgNum = 0;
 126   3                      }
 127   2                      if (port == 1)
 128   2                      {
 129   3                              RxCAN1IDs[mesgobj] = 0xFFFFFFFF;
 130   3                              rxframe1[mesgobj].arbID = 0xFFFFFFFF;
 131   3                              rxframe1[mesgobj].MsgNum = 0;
 132   3                      }
 133   2      
 134   2                      mesgobj++;
 135   2                      count--;
 136   2              }
 137   1      }               
 138          
 139          /****************************************************************************
 140          * Name: config_CAN_timing
 141          *  
 142          * Description:  Configure CAN Timing - 500kbps
 143          *              
 144          *               
 145          *               
 146          *                                     
 147          *****************************************************************************/
 148          
 149          void config_CAN_timing (unsigned int CANbaud)
 150          {
 151   1              SFRPAGE = CAN0_PAGE;
 152   1              CAN0CN |= 0x41;                                                 // Set CCE bit to enable write access
 153   1              CAN0ADR = BITREG;                                               // Point to the Bit Timing Register
 154   1      
 155   1              if (SYSCLK == 18000000)
 156   1              {
 157   2                      switch (CANbaud)
 158   2                      {
 159   3                              case 83:
 160   3                                      CAN0DATH = 0x5A;                                        // 18.0mhz BRP=11 83.3kbps
 161   3                                      CAN0DATL = 0xCB;                                        // Tseg2=6, Tseg1=11, SJW=4
 162   3                                      break;
 163   3                              case 125:
 164   3                                      CAN0DATH = 0x5A;                                        // 18.0mhz BRP=7 125kbps
 165   3                                      CAN0DATL = 0xC7;                                        // Tseg2=6, Tseg1=11, SJW=4
 166   3                                      break;
 167   3                              case 500:
 168   3                              default:
 169   3                                      CAN0DATH = 0x5A;                                        // 18.0mhz BRP=1 500kbps
 170   3                                      CAN0DATL = 0xC1;                                        // Tseg2=6, Tseg1=11, SJW=4
 171   3                                      break;
 172   3                      }
 173   2              }
 174   1              if (SYSCLK == 24000000)
 175   1              {
 176   2      //              CAN0DATH = 0x1C;                                        // 24.0mhz BRP=2 500kbps 87.5% sample point
 177   2      //              CAN0DATL = 0x02;
 178   2                      CAN0DATH = 0x54;                                        // 24.0mhz BRP=2 500kbps 68.8% sample point
 179   2                      CAN0DATL = 0x03;
C51 COMPILER V9.51   CAN                                                                   09/19/2016 15:58:03 PAGE 4   

 180   2              }
 181   1      
 182   1      
 183   1      }
 184          
 185          
 186          /****************************************************************************
 187          * Name: rx_can_frame
 188          *  
 189          * Description:  Receive CAN Data from the IF buffer
 190          *                       
 191          *                                     
 192          *****************************************************************************/
 193          
 194          // Modified for 29BIT/11BIT operation
 195          // MSB if set signals 29BIT XTD ID
 196          
 197          void rx_can_frame (U8 IntReg)
 198          {
 199   1              SFRPAGE = CAN0_PAGE;
 200   1      
 201   1              rxframe0[IntReg].MsgNum = IntReg;
 202   1      
 203   1              CAN0ADR = IF2CMDMSK;                                                    // Point to Command Mask 1
 204   1              CAN0DATL = 0x3F;                                                        // Config to READ CAN RAM, read data bytes, clr NewDat and IntPnd, arb I
             -D
 205   1              CAN0ADR = IF2CMDRQST;                                                   // Point to Command Request Reg.
 206   1              CAN0DATL = rxframe0[IntReg].MsgNum;                     // Move new data for RX from Msg Obj "MsgNum"
 207   1      
 208   1              if (IntReg >= RxBuffCnt[0])     // bogus Tx return now
 209   1                      return;
 210   1      
 211   1              //Get Arb ID
 212   1              CAN0ADR = IF2ARB2;                                                              //Point to Arbitration 2
 213   1      
 214   1              // check for XTD ID     
 215   1              if (CAN0DATH & 0x40)
 216   1              {
 217   2                      // XTD ID
 218   2                      CAN0ADR = IF2ARB2;                                                              //Point to Arbitration 2
 219   2                      rxframe0[IntReg].arbID = (((unsigned long)(CAN0DAT & 0x1FFF)) << 16) | 0x80000000;                                              
 220   2                      CAN0ADR = IF2ARB1;                                                      //Point to Arbitration 1
 221   2                      rxframe0[IntReg].arbID += ((unsigned long)(CAN0DATH) << 8) | (CAN0DATL);
 222   2              }
 223   1              else
 224   1                      // 11 BIT ID - ID28-18
 225   1                      rxframe0[IntReg].arbID = ((unsigned long)(CAN0DAT & 0x1FFF)) >> 2;
 226   1      
 227   1      
 228   1              //Get Data Size
 229   1              CAN0ADR = IF2MSGC;                                                              //Point to IF2 Message Control Register
 230   1              rxframe0[IntReg].sz = CAN0DATL & 0x0F;
 231   1              
 232   1              //Move new data to a buffer     
 233   1              CAN0ADR = IF2DATA1;                                                     // Point to 1st byte of Data Field         
 234   1              rxframe0[IntReg].cdat[0] = CAN0DATL;
 235   1              CAN0ADR = IF2DATA1;                                
 236   1              rxframe0[IntReg].cdat[1] = CAN0DATH;
 237   1      
 238   1              CAN0ADR = IF2DATA2;
 239   1              rxframe0[IntReg].cdat[2] = CAN0DATL;
 240   1              CAN0ADR = IF2DATA2;
C51 COMPILER V9.51   CAN                                                                   09/19/2016 15:58:03 PAGE 5   

 241   1              rxframe0[IntReg].cdat[3] = CAN0DATH;
 242   1      
 243   1              CAN0ADR = IF2DATB1;
 244   1              rxframe0[IntReg].cdat[4] = CAN0DATL;
 245   1              CAN0ADR = IF2DATB1;
 246   1              rxframe0[IntReg].cdat[5] = CAN0DATH;
 247   1      
 248   1              CAN0ADR = IF2DATB2;
 249   1              rxframe0[IntReg].cdat[6] = CAN0DATL;
 250   1              CAN0ADR = IF2DATB2;
 251   1              rxframe0[IntReg].cdat[7] = CAN0DATH;    
 252   1      
 253   1              RxCAN0 = 1;
 254   1      }
 255          
 256          /****************************************************************************
 257          * Name: CAN Interrupt
 258          *  
 259          * Description:  Interrupt routine for CAN RX/TX
 260          *              
 261          *                                     
 262          *****************************************************************************/
 263          
 264          void INT_CAN() interrupt 19                                                     // CAN interrupt
 265          {
 266   1              U8 IntReg;
 267   1              unsigned char hldSFRpage = SFRPAGE;
 268   1              U8 status;
 269   1      
 270   1              SFRPAGE = CAN0_PAGE;
 271   1      
 272   1              CAN0ADR = INTREG;
 273   1      
 274   1              IntReg = CAN0DATH;
 275   1              if (IntReg)                                                                             // status interrupt should never happen
 276   1              {
 277   2                      IntReg = CAN0CN;
 278   2                      status = CAN0STA;
 279   2      
 280   2                      // Clear Rx & Tx bits
 281   2                      CAN0STA = 0;
 282   2      //              status = 0;
 283   2      
 284   2                      SFRPAGE = hldSFRpage;
 285   2                      return;
 286   2              }
 287   1      
 288   1              IntReg = CAN0DATL;                                                              // read register interrupt number
 289   1              if (!IntReg || IntReg > 0x20 )                                  // SANITY CHECK
 290   1              {
 291   2                      SFRPAGE = hldSFRpage;
 292   2                      return;
 293   2              }
 294   1      
 295   1      
 296   1              // Get CAN status
 297   1              // status = CAN0STA;
 298   1              // Clear Rx & Tx bits
 299   1              CAN0STA = CAN0STA & 0xe7;
 300   1      
 301   1              if (CAN0STA & 0xE0)                                                     // error interrupt ?
 302   1                      {
C51 COMPILER V9.51   CAN                                                                   09/19/2016 15:58:03 PAGE 6   

 303   2                      CAN0CN = 1;                                                             // pull INIT high
 304   2                      CAN0CN = 0xA;                                                   // clear INIT flag
 305   2                      }       
 306   1      
 307   1      
 308   1              if (!(CANintMode))
 309   1              {
 310   2                      // CAN reception?
 311   2                      rx_can_frame(IntReg);
 312   2              }
 313   1              else
 314   1              {
 315   2                      CAN0STA &= ~0x8;                                                // Clear status bits
 316   2                      CANintMode = 0;                 
 317   2              }       
 318   1      
 319   1              SFRPAGE = hldSFRpage;
 320   1      }
 321          
 322          /****************************************************************************
 323          * Name: tx_can_frame
 324          *  
 325          * Description:  Transmit CAN frame - Tx CAN Frame is global
 326          *              
 327          *       
 328          *       returns timeout value, zero is failure          
 329          *                                     
 330          *****************************************************************************/
 331          unsigned char tx_can_frame (unsigned char KWPopts) 
 332          {               
 333   1              int timeout = 4096;                                             // roughley 2.5ms
 334   1      
 335   1              EIE2 &= ~0x01;                                  // disable Timer3 interrupts
 336   1      
 337   1              SFRPAGE = CAN0_PAGE;
 338   1              CAN0STA &= ~BIT3;                                               // Clear status bits
 339   1      
 340   1              CAN0ADR = IF1CMDMSK;                            // Point to Command Mask 1
 341   1              CAN0DAT = 0x00B7;                               // Config to WRITE to CAN RAM, write data bytes, set TXrqst/NewDat, Clr 
             -IntPnd
 342   1              CAN0ADR = IF1ARB1;
 343   1      
 344   1              // Check for 29BIT XTD ID - (BIT 31 is set)
 345   1              if (txframe.arbID & EXTFLG)
 346   1              {
 347   2                      // 29BIT XTD ID
 348   2                      CAN0DAT = (unsigned int)(txframe.arbID & 0x0000FFFF);
 349   2                      CAN0DAT = ((unsigned int)((txframe.arbID & 0x7FFF0000) >> 16)) | 0xe000;
 350   2              }
 351   1              else
 352   1              {
 353   2                      // 11BIT ID
 354   2                      CAN0DAT = 0x0000;                                       // Arb1 Data                    
 355   2                      CAN0DAT = ((unsigned int)(txframe.arbID << 2)) | 0xA000;
 356   2              }
 357   1      
 358   1              CAN0ADR = IF1MSGC;                                              // Data Size
 359   1      
 360   1              CAN0DAT = 0x0880 | txframe.sz;                  // w/ TxIE set (faster w/ TxIE set)                                              
 361   1              if (!(KWPopts & 0x80))
 362   1                      CANintMode = 1; 
 363   1      
C51 COMPILER V9.51   CAN                                                                   09/19/2016 15:58:03 PAGE 7   

 364   1              CAN0ADR = IF1DATA1;                             // Point to 1st byte of Data Field      
 365   1              CAN0DAT = (unsigned int)txframe.cdat[0] | ((unsigned int)txframe.cdat[1] << 8);
 366   1              CAN0DAT = (unsigned int)txframe.cdat[2] | ((unsigned int)txframe.cdat[3] << 8);
 367   1              CAN0DAT = (unsigned int)txframe.cdat[4] | ((unsigned int)txframe.cdat[5] << 8);
 368   1              CAN0DAT = (unsigned int)txframe.cdat[6] | ((unsigned int)txframe.cdat[7] << 8);
 369   1      
 370   1              CAN0ADR = IF1CMDRQST;                           // Point to Command Request Reg.
 371   1              CAN0DATL = txframe.MsgNum;                      // Move new data for TX to Msg Obj "MsgNum"
 372   1      
 373   1              EIE2 |= 0x01;                                   // enable Timer3 interrupts
 374   1      
 375   1              if (!(KWPopts & 0x80))
 376   1              {
 377   2                      while (CANintMode && timeout)           // interrupt will clear CANintMode
 378   2                              timeout--;
 379   2              }
 380   1      
 381   1              return(timeout);
 382   1      }
 383          
 384          /****************************************************************************
 385          * Name: init_msg_object_grx
 386          *  
 387          * Description:  Init Message Object for general RX
 388          *              
 389          *       
 390          *               
 391          *                                     
 392          *****************************************************************************/
 393          /*
 394          void init_msg_object_grx (unsigned char xtd)
 395          {
 396                  SFRPAGE = CAN0_PAGE;
 397                  CAN0ADR = IF2CMDMSK;                            // Point to Command Mask 1
 398                  //CAN0DAT = 0x00B8;                                             // Set to WRITE, and alter all Msg Obj except ID MASK and data bits
 399                  CAN0DAT = 0x00f8;                                               // set to write                                         
 400                  
 401                  CAN0ADR = IF2MSK1;                                              // set Mask
 402                  CAN0DAT = 0x0000;
 403                  CAN0ADR = IF2MSK2;
 404                  CAN0DAT = 0x0000;
 405          
 406                  CAN0ADR = IF2ARB1;                              // Point to arbitration1 register
 407                  CAN0DAT = 0x0000;
 408                  if (xtd)
 409                          CAN0DAT = (0 << 2) | 0xc000;
 410                  else
 411                          CAN0DAT = (0 << 2) | 0x8000;
 412                          
 413                  CAN0DAT = 0x1480;                               // Msg Cntrl: set RX IE, remote frame function not enabled
 414                  CAN0ADR = IF2CMDRQST;                           // Point to Command Request reg.
 415                  CAN0DATL = GLOBAL_RX;                           // Select Global Msg Obj  --initiates write to Msg Obj
 416                                                                                                  // 3-6 CAN clock cycles to move IF register contents to the Msg Obj in CAN RAM.
 417          }
 418          */
 419          
 420          //Initialize Message Object for RX
 421          void init_msg_object_rx (unsigned char MsgNum,unsigned long arbID) 
 422          {
 423   1              SFRPAGE = CAN0_PAGE;
 424   1              CAN0ADR = IF2CMDMSK;                            // Point to Command Mask 1
 425   1              CAN0DAT = 0x00B8;                               // Set to WRITE, and alter all Msg Obj except ID MASK and data bits
C51 COMPILER V9.51   CAN                                                                   09/19/2016 15:58:03 PAGE 8   

 426   1              CAN0ADR = IF2ARB1;                              // Point to arbitration1 register
 427   1      
 428   1              if (arbID & EXTFLG)
 429   1              {
 430   2                      // 29BIT XTD ID
 431   2                      CAN0DAT = (unsigned int)(arbID & 0x0000FFFF);
 432   2                      CAN0DAT = ((unsigned int)((arbID & 0x7FFF0000) >> 16)) | 0xc000;
 433   2              }
 434   1              else
 435   1              {
 436   2                      // 11BIT ID
 437   2                      CAN0DAT = 0x0000;
 438   2                      CAN0DAT = (arbID << 2) | 0x8000;
 439   2              }
 440   1      
 441   1      
 442   1              CAN0DAT = 0x0480;                               // Msg Cntrl: set RX IE, remote frame function not enabled
 443   1              CAN0ADR = IF2CMDRQST;                           // Point to Command Request reg.
 444   1              CAN0DATL = MsgNum;                              // Select Msg Obj passed into function parameter list --initiates write 
             -to Msg Obj
 445   1                                                                                              // 3-6 CAN clock cycles to move IF register contents to the Msg Obj in CAN RAM.
 446   1      }
 447          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1411    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
