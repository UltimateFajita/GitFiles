C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE LD_PURSUIT
OBJECT MODULE PLACED IN LD pursuit.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe LD pursuit.c DB OE BR INCDIR(C:\SiLabs\MCU\Inc)

line level    source

   1           //Can Bus Simulator
   2          //See function radtest for transmitting data
   3          
   4          
   5          #include "c8051F040.h"  
   6          #include "telematics.h"                                         
   7          #include <stdlib.h>
   8          #include <string.h>
   9          #include <stdio.h>
  10          
  11          sbit LED1 = P2^0;                                               // led output pin 
  12          sbit VR_BUTTON          = P1^4;                         // sw1 = 0 means switch pressed
  13          sbit PH_BUTTON          = P1^3;                         // sw2 = 0 means switch pressed
  14          sbit IGN_RUN_0          = P1^5;                         // sw3 = 0 means switch pressed
  15          sbit SEL_CAN_B          = P1^7;                         // CAN select pin 0 means can B, 1 means CAN c/i
  16          sbit CAN_B_EN           = P1^6;                         // CAN B enable pin,  0 means enable, 1 means disable
  17                                                  //Added for 6 position switch
  18          sbit IGN_RUN_5          = P0^6;
  19          sbit IGN_RUN_10         = P0^5;                         // sw4 = 0 means switch pressed
  20          sbit IGN_START          = P1^0;
  21          sbit IGN_OFF            = P0^7;                         // sw5 = 0 means switch pressed
  22          sbit IGN_ACC            = P1^1;                         // sw6 = 0 means switch pressed
  23          //sbit temp                     = P3^4;
  24          
  25          
  26          #define SYSCLK       24500000          // System Clock
*** WARNING C317 IN LINE 26 OF LD pursuit.c: attempt to redefine macro 'SYSCLK'
  27          #define SAR_CLK      2500000           // Desired SAR clock speed
  28          #define numb             9
  29          
  30          struct txframe
  31          {
  32                  unsigned char MsgNum;
  33                  unsigned char sz;
  34                  unsigned long arbID;
  35                  unsigned char cdat[8];
  36          
  37          }txframe;
  38          CANFRAME xdata rxframe[32];
  39          
  40          byte xdata IntReg;
  41          
  42          long ResultL, ResultH, Result, sw_inc;                           // ADC0 decimated value
  43          char MsgNum;
  44          char status;
  45          int tmp;
  46          int i;
  47          int v,sw,sw_temp;
  48          int j = 0;
  49          int h;
  50          int iii = 0;
  51          int count1 = 0;
  52          int flag_eng = 1;
  53          int flag_spa = 0;
  54          int flag_ger = 0;
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 2   

  55          int flag_fre = 0;
  56          int flag_ita = 0;
  57          int flag_jap = 0;
  58          int flag_chs = 0;
  59          int flag_cht = 0;
  60          
  61          
  62          
  63          
  64          void config_CAN_timing(void);
  65          void config_IO(void);
  66          void receive_data(char MsgNum);
  67          void clear_msg_objects(void);
  68          void radiotest(void);
  69          void codedelay(unsigned int delay);
  70          void clear_message_object (unsigned char mesgobj,unsigned char count);
  71          void onehundredms(void);
  72          void shortdelay(void);
  73          void IGN_MSG(void);
  74          void check_lang(void);
  75          void lang_cfg(void);
  76          void init_msg_object_rx (unsigned char MsgNum,unsigned int arbID);
  77          int ADC0_Analog_sel(void);
  78          void ADC0_Init (void);
  79          void SW_dim_set(int swi);
  80          
  81          
  82          
  83          /*******************************************************
  84          ** Function Name: Main()                                                          **
  85          ** Varibles: NONE                                                                         **
  86          ** Output Type:                                                                           **
  87          **                                                                                                        **
  88          **                                                                                                        **
  89          ** Description: The main function                                         **
  90          **                                                                                                        **
  91          **                                                                                                        **
  92          **                                                                                                        **
  93          **                                                                                                        **
  94          ** Date Modified:                                                                         **
  95          ** Author:                                                                                        **
  96          *******************************************************/
  97          void main(void) 
  98          {
  99   1        
 100   1        SEL_CAN_B = 1;
 101   1        CAN_B_EN  = 1;
 102   1        LED1      = 1;
 103   1        v = 0;
 104   1        // disable watchdog timer
 105   1        WDTCN = 0xde;
 106   1        WDTCN = 0xad;
 107   1          XBR0 = 0;                                                           // nothing used
 108   1              XBR1 = 0;                                                               // nothing used
 109   1              
 110   1              P4MDOUT = 0x00;
 111   1              P5MDOUT = 0x00; 
 112   1              P6MDOUT = 0x00;
 113   1              P7MDOUT = 0x00;
 114   1      
 115   1              
 116   1              
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 3   

 117   1        //configure Port I/O
 118   1        config_IO();
 119   1      
 120   1         // Init ADC
 121   1         ADC0_Init ();                                                
 122   1         
 123   1         // Enable the ADC                     
 124   1         ADC0CN |= 0x80;
 125   1      
 126   1      
 127   1              ////////////////////////////////////////
 128   1              // switch to external oscillator
 129   1              ////////////////////////////////////////
 130   1              SFRPAGE = CONFIG_PAGE;                          // switch to config page to config oscillator
 131   1              OSCXCN = 0x67;                                  // start external oscillator; 18.0/24.0 MHz Crystal
 132   1              codedelay(255);                                                 // delay about 1ms  
 133   1              while ((OSCXCN & 0x80) == 0);   
 134   1              CLKSEL |= 0x01;                                 // switch to external oscillator
 135   1      
 136   1      
 137   1        // Clear CAN RAM
 138   1        clear_msg_objects();
 139   1      
 140   1      
 141   1        //Function call to start CAN
 142   1        
 143   1        config_CAN_timing();
 144   1      
 145   1      
 146   1        clear_message_object(1,32);
 147   1              EIE2 = 0x20;
 148   1              EIP2 |= 0x20;                                                   // set priority high 
 149   1      
 150   1              //Function call to start CAN
 151   1              SFRPAGE = CAN0_PAGE;
 152   1              CAN0CN = 0x0A;                                                  //Enables Int's, Error and IE (rx or tx)
 153   1      
 154   1      
 155   1      
 156   1              init_msg_object_rx(30, 0x314); //TODO:change recieve address
 157   1              rxframe[1].MsgNum = 0;
 158   1      
 159   1        //Loop and wait for interrupts
 160   1        while (1)
 161   1          {
 162   2                      
 163   2                      IGN_MSG();
 164   2                      if (IGN_OFF != 0)
 165   2                      {
 166   3                              radiotest();
 167   3                              // poll for current switch number
 168   3                              sw = ADC0_Analog_sel(); 
 169   3                              SW_dim_set(sw);
 170   3                              iii = 0;
 171   3                      }
 172   2                      
 173   2      
 174   2                      
 175   2                      
 176   2              }           
 177   1      }
 178          
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 4   

 179          
 180          
 181          
 182          
 183          
 184          /*******************************************************
 185          ** Function name: tx_can_frame()                                          **
 186          ** Varibles: unsigned char KWPopts --                         **
 187          **                                                                                                        **
 188          **                                                                                                        **
 189          ** Output type: Byte                                                              **
 190          **                                                                                                        **
 191          **                                                                                                        **
 192          ** Description:                                                                           **
 193          **                                                                                                        **
 194          **                                                                                                        **
 195          **                                                                                                        **
 196          **                                                                                                        **
 197          ** Date Modified:                                                                         **
 198          ** Author:                                                                                        **
 199          *******************************************************/
 200          byte tx_can_frame (unsigned char KWPopts) 
 201          {               
 202   1              int timeout = 4096;                                             // roughley 2.5ms
 203   1      
 204   1              EIE2 &= ~0x01;                                  // disable Timer3 interrupts
 205   1      
 206   1              SFRPAGE = CAN0_PAGE;
 207   1              CAN0STA &= ~BIT3;                                               // Clear status bits
 208   1      
 209   1              CAN0ADR = IF1CMDMSK;                            // Point to Command Mask 1
 210   1              CAN0DAT = 0x00B7;                               // Config to WRITE to CAN RAM, write data bytes, set TXrqst/NewDat, Clr 
             -IntPnd
 211   1              CAN0ADR = IF1ARB1;
 212   1      
 213   1      
 214   1              
 215   1                      // 11BIT ID
 216   1                      CAN0DAT = 0x0000;                                       // Arb1 Data                    
 217   1                      CAN0DAT = ((unsigned int)(txframe.arbID << 2)) | 0xA000;
 218   1              
 219   1      
 220   1              CAN0ADR = IF1MSGC;                                              // Data Size
 221   1      
 222   1              CAN0DAT = 0x0880 | txframe.sz;                  // w/ TxIE set                                           
 223   1      
 224   1      
 225   1              CAN0ADR = IF1DATA1;                             // Point to 1st byte of Data Field      
 226   1              CAN0DAT = (unsigned int)txframe.cdat[0] | ((unsigned int)txframe.cdat[1] << 8);
 227   1              CAN0DAT = (unsigned int)txframe.cdat[2] | ((unsigned int)txframe.cdat[3] << 8);
 228   1              CAN0DAT = (unsigned int)txframe.cdat[4] | ((unsigned int)txframe.cdat[5] << 8);
 229   1              CAN0DAT = (unsigned int)txframe.cdat[6] | ((unsigned int)txframe.cdat[7] << 8);
 230   1      
 231   1              CAN0ADR = IF1CMDRQST;                           // Point to Command Request Reg.
 232   1              CAN0DATL = txframe.MsgNum;                      // Move new data for TX to Msg Obj "MsgNum"
 233   1      
 234   1      }
*** WARNING C173 IN LINE 234 OF LD pursuit.c: missing return-expression
*** WARNING C280 IN LINE 200 OF LD pursuit.c: 'KWPopts': unreferenced local variable
 235          
 236          
 237          
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 5   

 238          
 239          /*******************************************************
 240          ** Function name: config_CAN_timing()                             **
 241          ** Varibles: NONE                                                                         **
 242          ** Output type:                                                                           **
 243          **                                                                                                        **
 244          **                                                                                                        **
 245          ** Description:                                                                           **
 246          **                                                                                                        **
 247          **                                                                                                        **
 248          **                                                                                                        **
 249          **                                                                                                        **
 250          ** Date Modified:                                                                         **
 251          ** Author:                                                                                        **
 252          *******************************************************/
 253          void config_CAN_timing(void)
 254          {
 255   1              SFRPAGE = CAN0_PAGE;
 256   1              CAN0CN |= 0x41;                                                 // Set CCE bit to enable write access
 257   1              CAN0ADR = BITREG;                                               // Point to the Bit Timing Register
 258   1      
 259   1              CAN0DATH = 0x5A;                                        // 18.0mhz BRP=7 125kbps
 260   1              CAN0DATL = 0xC7;                                        // Tseg2=6, Tseg1=11, SJW=4
 261   1      }
 262          
 263          
 264          
 265          /*******************************************************
 266          ** Function name: config_IO()                                             **
 267          ** Varibles: NONE                                                                         **
 268          ** Output type:                                                                           **
 269          **                                                                                                        **
 270          **                                                                                                        **
 271          ** Description:                                                                           **
 272          **                                                                                                        **
 273          **                                                                                                        **
 274          **                                                                                                        **
 275          **                                                                                                        **
 276          ** Date Modified:                                                                         **
 277          ** Author:                                                                                        **
 278          *******************************************************/
 279          void config_IO(void)
 280          {
 281   1        
 282   1      
 283   1      char SFRPAGE_SAVE = SFRPAGE;
 284   1      
 285   1                      SFRPAGE = CONFIG_PAGE;
 286   1                      
 287   1                      
 288   1                      P0MDOUT  = 0x03;                        //pin P0^0 & P0^1 are push pull
 289   1                      P2MDIN  |= 0x01;                        //pin P2^0 is digital
 290   1                      P2MDOUT  = 0x01;                        //pin P2^0 is push pull 
 291   1                      P1MDOUT  = 0x00;                        //Port 1 is open drain
 292   1                      P1MDIN   = 0xff; 
 293   1                      
 294   1                      P3MDIN  |= 0x00;
 295   1                      P3MDOUT  = 0x00;
 296   1      
 297   1                              
 298   1                      XBR2     = 0x40;                        // enable crossbar and disable weak pullups
 299   1                      XBR3     = 0x80;     // Configure CAN TX pin (CTX) as push-pull digital output          
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 6   

 300   1                      SFRPAGE = SFRPAGE_SAVE;
 301   1                      //temp |= 1;
 302   1      
 303   1      }
 304          
 305          
 306          /*******************************************************
 307          ** Function name: receive_data()                                          **
 308          ** Varibles: char MsgNum --                                                       **
 309          ** Output type:                                                                           **
 310          **                                                                                                        **
 311          **                                                                                                        **
 312          ** Description:                                                                           **
 313          **                                                                                                        **
 314          **                                                                                                        **
 315          **                                                                                                        **
 316          **                                                                                                        **
 317          ** Date Modified:                                                                         **
 318          ** Author:                                                                                        **
 319          *******************************************************/
 320          void receive_data(char MsgNum)
 321          {
 322   1        
 323   1        SFRPAGE = CAN0_PAGE; //Saves 
 324   1      
 325   1              
 326   1              for (count1 =  MsgNum; count1 >= 0;count1--)
 327   1              {
 328   2              rxframe[1].MsgNum = 30;
 329   2      
 330   2              CAN0ADR = IF2CMDMSK;                                                    // Point to Command Mask 1
 331   2              CAN0DATL = 0x3F;                                                        // Config to READ CAN RAM, read data bytes, clr NewDat and IntPnd, arb I
             -D
 332   2              CAN0ADR = IF2CMDRQST;                                                   // Point to Command Request Reg.
 333   2              CAN0DATL = rxframe[1].MsgNum;                           // Move new data for RX from Msg Obj "MsgNum"
 334   2      
 335   2              //Get Arb ID
 336   2              CAN0ADR = IF2ARB2;                                                              //Point to Arbitration 2
 337   2              rxframe[1].arbID = (CAN0DAT & 0x1FFF) >> 2;
 338   2      
 339   2              //Get Data Size
 340   2              CAN0ADR = IF2MSGC;                                                              //Point to IF2 Message Control Register
 341   2              rxframe[1].sz = CAN0DATL & 0x0F;
 342   2              
 343   2              //Move new data to a buffer     
 344   2              CAN0ADR = IF2DATA1;                                                     // Point to 1st byte of Data Field         
 345   2              rxframe[1].cdat[0] = CAN0DATL;
 346   2              CAN0ADR = IF2DATA1;                                
 347   2              rxframe[1].cdat[1] = CAN0DATH;
 348   2      
 349   2              CAN0ADR = IF2DATA2;
 350   2              rxframe[1].cdat[2] = CAN0DATL;
 351   2              CAN0ADR = IF2DATA2;
 352   2              rxframe[1].cdat[3] = CAN0DATH;
 353   2      
 354   2              CAN0ADR = IF2DATB1;
 355   2              rxframe[1].cdat[4] = CAN0DATL;
 356   2              CAN0ADR = IF2DATB1;
 357   2              rxframe[IntReg].cdat[5] = CAN0DATH;
 358   2      
 359   2              check_lang();   // change configuration message depending on request from radio
 360   2              
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 7   

 361   2              }
 362   1        
 363   1      }
 364          
 365          
 366          
 367          /*******************************************************
 368          ** Function name: ISRname()                                                       **
 369          ** Varibles: NONE                                                                         **
 370          ** Output type:                                                                           **
 371          **                                                                                                        **
 372          **                                                                                                        **
 373          ** Description:                                                                           **
 374          **                                                                                                        **
 375          **                                                                                                        **
 376          **                                                                                                        **
 377          **                                                                                                        **
 378          ** Date Modified:                                                                         **
 379          ** Author:                                                                                        **
 380          *******************************************************/
 381          void ISRname(void) interrupt 19
 382          {
 383   1        status = CAN0STA;
 384   1        if ((status&0x10) != 0)
 385   1          {                            // RxOk is set, interrupt caused by reception
 386   2            CAN0STA = (CAN0STA&0xEF)|0x07;         // Reset RxOk, set LEC to NoChange
 387   2            /* read message number from CAN INTREG */
 388   2            receive_data (0x01);             // Up to now, we have only one RX message
 389   2          }
 390   1        if ((status&0x08) != 0)
 391   1          {                            // TxOk is set, interrupt caused by transmision
 392   2            CAN0STA = (CAN0STA&0xF7)|0x07;        // Reset TxOk, set LEC to NoChange
 393   2          }
 394   1        if (((status&0x07) != 0)&&((status&0x07) != 7))
 395   1          {                           // Error interrupt, LEC changed
 396   2            /* error handling ? */
 397   2            CAN0STA = CAN0STA|0x07;              // Set LEC to NoChange
 398   2          }
 399   1      
 400   1              EA = 0;
 401   1              EA = 0;
 402   1      }
 403          
 404          
 405          
 406          /*******************************************************
 407          ** Function name: clear_msg_objects()                             **
 408          ** Varibles: NONE                                                                         **
 409          ** Output type:                                                                           **
 410          **                                                                                                        **
 411          **                                                                                                        **
 412          ** Description:                                                                           **
 413          **                                                                                                        **
 414          **                                                                                                        **
 415          **                                                                                                        **
 416          **                                                                                                        **
 417          ** Date Modified:                                                                         **
 418          ** Author:                                                                                        **
 419          *******************************************************/
 420          void clear_msg_objects(void)
 421          {
 422   1        SFRPAGE  = CAN0_PAGE;
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 8   

 423   1        CAN0ADR  = IF1CMDMSK;    // Point to Command Mask Register 1
 424   1        CAN0DATL = 0xFF;         // Set direction to WRITE all IF registers to Msg Obj
 425   1        for (i=1;i<33;i++)
 426   1          {
 427   2            CAN0ADR = IF1CMDRQST; // Write blank (reset) IF registers to each msg obj
 428   2            CAN0DATL = i;
 429   2          }
 430   1      }
 431          
 432          
 433          
 434          /*******************************************************
 435          ** Function name: ING_MSG()                                                       **
 436          ** Varibles: NONE                                                                         **
 437          ** Output type:                                                                           **
 438          **                                                                                                        **
 439          **                                                                                                        **
 440          ** Description:                                                                           **
 441          **                                                                                                        **
 442          **                                                                                                        **
 443          **                                                                                                        **
 444          **                                                                                                        **
 445          ** Date Modified:                                                                         **
 446          ** Author:                                                                                        **
 447          *******************************************************/
 448          void IGN_MSG (void)
 449          {
 450   1      
 451   1              if (IGN_OFF == 0)
 452   1              {
 453   2                              
 454   2                              while (iii < 300)
 455   2                              {
 456   3                                      if (IGN_OFF != 0)
 457   3                                              break;
 458   3                                      onehundredms();                                 //100ms delay loop
 459   3                                      txframe.MsgNum = 1;                             //Message number(sequential starting at 1 for unique messages                                                   
 460   3                                      txframe.arbID = 0x122;                  //Message ID    CBC_13 Vehicle start packet                                                                     
 461   3                                      txframe.sz = 4;                                 //Message size(number of bytes 1-8)
 462   3                                      txframe.cdat[0] = 0x01;         //ignition run, start not active  04 = run ;02=ACC ;0D= NormalStart, ke
             -y in Ign,                                                 
 463   3                                      txframe.cdat[1] = 0x02;                 //key in ignition
 464   3                                      txframe.cdat[2] = 0x00;         //null                                  
 465   3                                      txframe.cdat[3] = 0x00;                 //null  
 466   3                                      tx_can_frame(0);                                //transmits can frame
 467   3                                      iii++;
 468   3                                      
 469   3                              }
 470   2      
 471   2              }
 472   1              
 473   1              if (IGN_ACC == 0)
 474   1              {
 475   2                              shortdelay();                                   //100ms delay loop
 476   2                              txframe.MsgNum = 1;                             //Message number(sequential starting at 1 for unique messages                                                   
 477   2                              txframe.arbID = 0x122;                  //Message ID    CBC_13 Vehicle start packet                                                                     
 478   2                              txframe.sz = 4;                                 //Message size(number of bytes 1-8)
 479   2                              txframe.cdat[0] = 0x02;         //ignition run, start not active  04 = run ;02=ACC ;0D= NormalStart, key
             - in Ign,                                                 
 480   2                              txframe.cdat[1] = 0x02;                 //key in ignition
 481   2                              txframe.cdat[2] = 0x00;         //null                                  
 482   2                              txframe.cdat[3] = 0x00;                 //null  
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 9   

 483   2                              tx_can_frame(0);                                //transmits can frame
 484   2      
 485   2                              shortdelay();
 486   2                              txframe.MsgNum = 20;                      //Speed message       bytes 3 and 2 set speed (VEH_SPEED)                                             
 487   2                              txframe.arbID = 0x322;                  // speed =      km/h  /  0.0078125 km/h *       (50k/h / 0.0078125 km/h)=  6400 = 0x1
             -900                                                 
 488   2                              txframe.sz = 8;                           
 489   2                              txframe.cdat[0] = 0x00;                                                 
 490   2                              txframe.cdat[1] = 0x00; 
 491   2                              txframe.cdat[2] = 0x00;                                         
 492   2                              txframe.cdat[3] = 0x00;   
 493   2                              txframe.cdat[4] = 0x00;                                                 
 494   2                              txframe.cdat[5] = 0x00; 
 495   2                              txframe.cdat[6] = 0x00;
 496   2                              txframe.cdat[7] = 0x00;
 497   2                              tx_can_frame(0);
 498   2              }
 499   1      
 500   1              if (IGN_RUN_0 == 0)
 501   1              {
 502   2                              shortdelay();                                   //100ms delay loop
 503   2                              txframe.MsgNum = 1;                             //Message number(sequential starting at 1 for unique messages                                                   
 504   2                              txframe.arbID = 0x122;                  //Message ID    CBC_13 Vehicle start packet                                                                     
 505   2                              txframe.sz = 4;                                 //Message size(number of bytes 1-8)
 506   2                              txframe.cdat[0] = 0x04;         //ignition run, start not active  04 = run ;02=ACC ;0D= NormalStart, key
             - in Ign,                                                 
 507   2                              txframe.cdat[1] = 0x02;                 //key in ignition
 508   2                              txframe.cdat[2] = 0x00;         //null                                  
 509   2                              txframe.cdat[3] = 0x00;                 //null  
 510   2                              tx_can_frame(0);                                //transmits can frame
 511   2      
 512   2                              shortdelay();
 513   2                              txframe.MsgNum = 20;                      //Speed message       bytes 3 and 2 set speed (VEH_SPEED)                                             
 514   2                              txframe.arbID = 0x322;                  // speed =      km/h  /  0.0078125 km/h *       (50k/h / 0.0078125 km/h)=  6400 = 0x1
             -900                                                 
 515   2                              txframe.sz = 8;                           
 516   2                              txframe.cdat[0] = 0x00;                                                 
 517   2                              txframe.cdat[1] = 0x00; 
 518   2                              txframe.cdat[2] = 0x00;                                         
 519   2                              txframe.cdat[3] = 0x00;   
 520   2                              txframe.cdat[4] = 0x00;                                                 
 521   2                              txframe.cdat[5] = 0x00; 
 522   2                              txframe.cdat[6] = 0x00;
 523   2                              txframe.cdat[7] = 0x00;
 524   2                              tx_can_frame(0);
 525   2              }
 526   1      
 527   1              if (IGN_RUN_10 == 0)
 528   1              {
 529   2                              shortdelay();                                   //100ms delay loop
 530   2                              txframe.MsgNum = 1;                             //Message number(sequential starting at 1 for unique messages                                                   
 531   2                              txframe.arbID = 0x122;                  //Message ID    CBC_13 Vehicle start packet                                                                     
 532   2                              txframe.sz = 4;                                 //Message size(number of bytes 1-8)
 533   2                              txframe.cdat[0] = 0x04;         //ignition run, start not active  04 = run ;02=ACC ;0D= NormalStart, key
             - in Ign,                                                 
 534   2                              txframe.cdat[1] = 0x02;                 //key in ignition
 535   2                              txframe.cdat[2] = 0x00;         //null                                  
 536   2                              txframe.cdat[3] = 0x00;                 //null  
 537   2                              tx_can_frame(0);                                //transmits can frame
 538   2      
 539   2                              shortdelay();
 540   2                              txframe.MsgNum = 20;                      //Speed message       bytes 3 and 2 set speed (VEH_SPEED)                                             
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 10  

 541   2                              txframe.arbID = 0x322;                  // speed =      km/h  /  0.0078125 km/h *       (50k/h / 0.0078125 km/h)=  6400 = 0x1
             -900                                                 
 542   2                              txframe.sz = 8;                           
 543   2                              txframe.cdat[0] = 0x00;                                                 
 544   2                              txframe.cdat[1] = 0x00; 
 545   2                              txframe.cdat[2] = 0x08;                                         
 546   2                              txframe.cdat[3] = 0x00;   
 547   2                              txframe.cdat[4] = 0x00;                                                 
 548   2                              txframe.cdat[5] = 0x00; 
 549   2                              txframe.cdat[6] = 0x00;
 550   2                              txframe.cdat[7] = 0x00;
 551   2                              tx_can_frame(0);
 552   2              }
 553   1      
 554   1              if (IGN_RUN_5 == 0)
 555   1              {
 556   2                              shortdelay();                                   //100ms delay loop
 557   2                              txframe.MsgNum = 1;                             //Message number(sequential starting at 1 for unique messages                                                   
 558   2                              txframe.arbID = 0x122;                  //Message ID    CBC_13 Vehicle start packet                                                                     
 559   2                              txframe.sz = 4;                                 //Message size(number of bytes 1-8)
 560   2                              txframe.cdat[0] = 0x04;         //ignition run, start not active  04 = run ;02=ACC ;0D= NormalStart, key
             - in Ign,                                                 
 561   2                              txframe.cdat[1] = 0x02;                 //key in ignition
 562   2                              txframe.cdat[2] = 0x00;         //null                                  
 563   2                              txframe.cdat[3] = 0x00;                 //null  
 564   2                              tx_can_frame(0);                                //transmits can frame
 565   2      
 566   2                              shortdelay();
 567   2                              txframe.MsgNum = 20;                      //Speed message       bytes 3 and 2 set speed (VEH_SPEED)                                             
 568   2                              txframe.arbID = 0x322;                  // speed =      km/h  /  0.0078125 km/h *       (50k/h / 0.0078125 km/h)=  6400 = 0x1
             -900                                                 
 569   2                              txframe.sz = 8;                           
 570   2                              txframe.cdat[0] = 0x00;                                                 
 571   2                              txframe.cdat[1] = 0x00; 
 572   2                              txframe.cdat[2] = 0x04;                                         
 573   2                              txframe.cdat[3] = 0x05;   
 574   2                              txframe.cdat[4] = 0x00;                                                 
 575   2                              txframe.cdat[5] = 0x00; 
 576   2                              txframe.cdat[6] = 0x00;
 577   2                              txframe.cdat[7] = 0x00;
 578   2                              tx_can_frame(0);
 579   2              }
 580   1      
 581   1              if (IGN_START == 0)
 582   1              {
 583   2                              shortdelay();                                   //100ms delay loop
 584   2                              txframe.MsgNum = 1;                             //Message number(sequential starting at 1 for unique messages                                                   
 585   2                              txframe.arbID = 0x122;                  //Message ID    CBC_13 Vehicle start packet                                                                     
 586   2                              txframe.sz = 4;                                 //Message size(number of bytes 1-8)
 587   2                              txframe.cdat[0] = 0x05;         //ignition run, start not active  04 = run ;02=ACC ;0D= NormalStart, key
             - in Ign,                                                 
 588   2                              txframe.cdat[1] = 0x02;                 //key in ignition
 589   2                              txframe.cdat[2] = 0x00;         //null                                  
 590   2                              txframe.cdat[3] = 0x00;                 //null  
 591   2                              tx_can_frame(0);                                //transmits can frame
 592   2      
 593   2                              shortdelay();
 594   2                              txframe.MsgNum = 20;                      //Speed message       bytes 3 and 2 set speed (VEH_SPEED)                                             
 595   2                              txframe.arbID = 0x322;                  // speed =      km/h  /  0.0078125 km/h *       (50k/h / 0.0078125 km/h)=  6400 = 0x1
             -900                                                 
 596   2                              txframe.sz = 8;                           
 597   2                              txframe.cdat[0] = 0x00;                                                 
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 11  

 598   2                              txframe.cdat[1] = 0x00; 
 599   2                              txframe.cdat[2] = 0x00;                                         
 600   2                              txframe.cdat[3] = 0x00;   
 601   2                              txframe.cdat[4] = 0x00;                                                 
 602   2                              txframe.cdat[5] = 0x00; 
 603   2                              txframe.cdat[6] = 0x00;
 604   2                              txframe.cdat[7] = 0x00;
 605   2                              tx_can_frame(0);
 606   2              }
 607   1      }
 608          
 609          
 610          
 611          /*******************************************************
 612          ** Function name: radiotest()                                             **
 613          ** Varibles: NONE                                                                         **
 614          ** Output type:                                                                           **
 615          **                                                                                                        **
 616          **                                                                                                        **
 617          ** Description:                                                                           **
 618          **                                                                                                        **
 619          **                                                                                                        **
 620          **                                                                                                        **
 621          **                                                                                                        **
 622          ** Date Modified:                                                                         **
 623          ** Author:                                                                                        **
 624          *******************************************************/
 625          void radiotest(void)
 626          
 627          {       
 628   1                      //VIN Entry -------------------------------------------------------------------------------
 629   1      
 630   1                      char VIN[17] = "1C3CCCCB7FN1130UC";
 631   1      
 632   1                              shortdelay();
 633   1                              txframe.MsgNum = 2;                       //Message number(sequential starting at 1 for unique messages                                                 
 634   1                              txframe.arbID = 0x3f2;            //Message ID CBC_12                                                                   
 635   1                              txframe.sz = 8;                           //8 bytes
 636   1                              txframe.cdat[0] = 0x95;                                                 
 637   1                              txframe.cdat[1] = 0x02; 
 638   1                              txframe.cdat[2] = 0x57;                                         
 639   1                              txframe.cdat[3] = 0xA0;   
 640   1                              txframe.cdat[4] = 0x09;                                                 
 641   1                              txframe.cdat[5] = 0x00; 
 642   1                              txframe.cdat[6] = 0x00;
 643   1                              txframe.cdat[7] = 0x02;       // Change to 0x02 for USB and AUX, 0x03 for USB/SD/AUX      
 644   1                              tx_can_frame(0); 
 645   1      
 646   1                              
 647   1                              shortdelay();
 648   1                              txframe.MsgNum = 4;                       //Message number(sequential starting at 1 for unique messages                                                 
 649   1                              txframe.arbID = 0x3e0;            //Message ID VIN, VIN_LO hex 31 = ascii 1                                                                             
 650   1                              txframe.sz = 8;                           //8 bytes
 651   1                              txframe.cdat[0] = 0x00;                                                 
 652   1                              txframe.cdat[1] = VIN[0];       
 653   1                              txframe.cdat[2] = VIN[1];                                               
 654   1                              txframe.cdat[3] = VIN[2];         
 655   1                              txframe.cdat[4] = VIN[3];                                                       
 656   1                              txframe.cdat[5] = VIN[4];       
 657   1                              txframe.cdat[6] = VIN[5];
 658   1                              txframe.cdat[7] = VIN[6];                 
 659   1                              tx_can_frame(0);
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 12  

 660   1      
 661   1                              onehundredms();
 662   1                              shortdelay();
 663   1                              txframe.MsgNum = 5;                       //Message number(sequential starting at 1 for unique messages                                                 
 664   1                              txframe.arbID = 0x3e0;            //Message ID VIN, VIN_MID hex 31 = ascii 1                                                                            
 665   1                              txframe.sz = 8;                           //8 bytes
 666   1                              txframe.cdat[0] = 0x01;                                                 
 667   1                              txframe.cdat[1] = VIN[7];       
 668   1                              txframe.cdat[2] = VIN[8];                                       
 669   1                              txframe.cdat[3] = VIN[9];         
 670   1                              txframe.cdat[4] = VIN[10];                                                      
 671   1                              txframe.cdat[5] = VIN[11];      
 672   1                              txframe.cdat[6] = VIN[12];
 673   1                              txframe.cdat[7] = VIN[13];                
 674   1                              tx_can_frame(0);
 675   1      
 676   1                              onehundredms();
 677   1                              shortdelay();
 678   1                              txframe.MsgNum = 6;                       //Message number(sequential starting at 1 for unique messages                                                 
 679   1                              txframe.arbID = 0x3e0;            //Message ID VIN, VIN_HI hex 31 = ascii 1                                                                             
 680   1                              txframe.sz = 8;                           //8 bytes
 681   1                              txframe.cdat[0] = 0x02;                                                 
 682   1                              txframe.cdat[1] = VIN[14];      
 683   1                              txframe.cdat[2] = VIN[15];                                              
 684   1                              txframe.cdat[3] = VIN[16];        
 685   1                              txframe.cdat[4] = 0x00;                                                 
 686   1                              txframe.cdat[5] = 0x00; 
 687   1                              txframe.cdat[6] = 0x00;
 688   1                              txframe.cdat[7] = 0x00;           
 689   1                              tx_can_frame(0);
 690   1                      
 691   1                      
 692   1                              shortdelay();
 693   1                              txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
 694   1                              txframe.arbID = 0x3E8;            //Message ID CBC_12                                                                   
 695   1                              txframe.sz = 8;                           //8 bytes
 696   1                              txframe.cdat[0] = 0x41;                                                 
 697   1                              txframe.cdat[1] = 0x29; 
 698   1                              txframe.cdat[2] = 0x22;                                         
 699   1                              txframe.cdat[3] = 0x13;   
 700   1                              txframe.cdat[4] = 0x00;                                                 
 701   1                              txframe.cdat[5] = 0x00; 
 702   1                              txframe.cdat[6] = 0x00;
 703   1                              txframe.cdat[7] = 0x00;           
 704   1                              tx_can_frame(0);
 705   1                              
 706   1                      
 707   1                              shortdelay();
 708   1                              txframe.MsgNum = 11;                      //Message number(sequential starting at 1 for unique messages                                                 
 709   1                              txframe.arbID = 0x3EA;            //Message ID CBC_12                                                                   
 710   1                              txframe.sz = 8;                           //8 bytes
 711   1                              txframe.cdat[0] = 0x01;                                                 
 712   1                              txframe.cdat[1] = 0x00; 
 713   1                              txframe.cdat[2] = 0x00;                                         
 714   1                              txframe.cdat[3] = 0x00;   
 715   1                              txframe.cdat[4] = 0x00;                                                 
 716   1                              txframe.cdat[5] = 0x2F; 
 717   1                              txframe.cdat[6] = 0x00;
 718   1                              txframe.cdat[7] = 0x00;           
 719   1                              tx_can_frame(0);
 720   1      
 721   1                              shortdelay();
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 13  

 722   1                              txframe.MsgNum = 15;                      //Message number(sequential starting at 1 for unique messages                                                 
 723   1                              txframe.arbID = 0x22F;            //Message ID CBC_12                                                                   
 724   1                              txframe.sz = 1;                           //8 bytes
 725   1                              txframe.cdat[0] = 0x01;                                                                   
 726   1                              tx_can_frame(0);
 727   1      
 728   1                              if (PH_BUTTON == 0 )                   
 729   1      
 730   1                                      { 
 731   2                                                      shortdelay();
 732   2                                                              txframe.MsgNum = 13;                      //Message number(sequential starting at 1 for unique messages                                                 
 733   2                                                              txframe.arbID = 0x318;            //Message ID VR active message byte 5 x02                                                                             
 734   2                                                              txframe.sz = 8;                           //8 bytes
 735   2                                                              txframe.cdat[0] = 0x00;                                                 
 736   2                                                              txframe.cdat[1] = 0x00; 
 737   2                                                              txframe.cdat[2] = 0x00;  // lever in reverse                                            
 738   2                                                              txframe.cdat[3] = 0x00;   
 739   2                                                              txframe.cdat[4] = 0x00;                                                 
 740   2                                                              txframe.cdat[5] = 0x01; 
 741   2                                                              txframe.cdat[6] = 0x00;
 742   2                                                              txframe.cdat[7] = 0x00;           
 743   2                                                              tx_can_frame(0);
 744   2      
 745   2                                                      
 746   2                                      
 747   2                                                      }                       
 748   1                                      else if (VR_BUTTON == 0)  
 749   1                                        {  
 750   2                                                      shortdelay();
 751   2                                                              txframe.MsgNum = 12;                      //Message number(sequential starting at 1 for unique messages                                                 
 752   2                                                              txframe.arbID= 0x318;             //Message ID VR off                                                                   
 753   2                                                              txframe.sz = 8;                           //8 bytes
 754   2                                                              txframe.cdat[0] = 0x00;                                                 
 755   2                                                              txframe.cdat[1] = 0x00; 
 756   2                                                              txframe.cdat[2] = 0x00;   // lever in Park                                      
 757   2                                                              txframe.cdat[3] = 0x00;   
 758   2                                                              txframe.cdat[4] = 0x00;                                                 
 759   2                                                              txframe.cdat[5] = 0x02; 
 760   2                                                              txframe.cdat[6] = 0x00;
 761   2                                                              txframe.cdat[7] = 0x00;           
 762   2                                                              tx_can_frame(0);
 763   2                                        }               
 764   1                              
 765   1                                      else
 766   1                                                      {
 767   2                                                              shortdelay();
 768   2                                                              txframe.MsgNum = 12;                      //Message number(sequential starting at 1 for unique messages                                                 
 769   2                                                              txframe.arbID= 0x318;             //Message ID VR off                                                                   
 770   2                                                              txframe.sz = 8;                           //8 bytes
 771   2                                                              txframe.cdat[0] = 0x00;                                                 
 772   2                                                              txframe.cdat[1] = 0x00; 
 773   2                                                              txframe.cdat[2] = 0x00;   // lever in Park                                      
 774   2                                                              txframe.cdat[3] = 0x00;   
 775   2                                                              txframe.cdat[4] = 0x00;                                                 
 776   2                                                              txframe.cdat[5] = 0x00; 
 777   2                                                              txframe.cdat[6] = 0x00;
 778   2                                                              txframe.cdat[7] = 0x00;           
 779   2                                                              tx_can_frame(0);
 780   2                                              
 781   2                                              }
 782   1      
 783   1                      //lang_cfg();   
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 14  

 784   1      
 785   1                      EA = 1;                 //enable interupt
 786   1                      //receive_data(30);
 787   1                      
 788   1      }
 789          
 790          
 791          /*******************************************************
 792          ** Function name: SW_dim_set()                                            **
 793          ** Varibles: NONE                                                                         **
 794          ** Output type:                                                                           **
 795          **                                                                                                        **
 796          **                                                                                                        **
 797          ** Description:                                                                           **
 798          **                                                                                                        **
 799          **                                                                                                        **
 800          **                                                                                                        **
 801          **                                                                                                        **
 802          ** Date Modified:                                                                         **
 803          ** Author:                                                                                        **
 804          *******************************************************/
 805          void SW_dim_set(int swi)
 806          {
 807   1      //                                      shortdelay();
 808   1      //                                      txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
 809   1      //                                      txframe.arbID = 0x2fa;            //Message ID CBC_12                                                                   
 810   1      //                                      txframe.sz = 8;                           //8 bytes
 811   1      //                                      txframe.cdat[0] = 0x00;                                                 
 812   1      //                                      txframe.cdat[1] = 0x00; 
 813   1      //                                      txframe.cdat[2] = 0x00;                                         
 814   1      //                                      txframe.cdat[3] = 0x00;   
 815   1      //                                      txframe.cdat[4] = 0x00;                                                 
 816   1      //                                      txframe.cdat[5] = 0x00; 
 817   1      //                                      txframe.cdat[6] = (swi << 8);
 818   1      //                                      txframe.cdat[7] = 0x00;           
 819   1      //                                      tx_can_frame(0);
 820   1                      int l;
 821   1              
 822   1                      switch(swi){
 823   2                              case 1:
 824   2                                              //
 825   2                                              shortdelay();
 826   2                                              txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
 827   2                                              txframe.arbID = 0x2fa;            //Message ID CBC_12                                                                   
 828   2                                              txframe.sz = 8;                           //8 bytes
 829   2                                              txframe.cdat[0] = 0x00;                                                 
 830   2                                              txframe.cdat[1] = 0x01; 
 831   2                                              txframe.cdat[2] = 0xC8;                                         
 832   2                                              txframe.cdat[3] = 0x0C;   
 833   2                                              txframe.cdat[4] = 0x00;                                                 
 834   2                                              txframe.cdat[5] = 0x00; 
 835   2                                              txframe.cdat[6] = 0xC8;
 836   2                                              txframe.cdat[7] = 0x00;           
 837   2                                              tx_can_frame(0);
 838   2                              break;
 839   2                              case 2:
 840   2                                              shortdelay();
 841   2                                              txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
 842   2                                              txframe.arbID = 0x2fa;            //Message ID CBC_12                                                                   
 843   2                                              txframe.sz = 8;                           //8 bytes
 844   2                                              txframe.cdat[0] = 0x00;                                                 
 845   2                                              txframe.cdat[1] = 0x01; 
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 15  

 846   2                                              txframe.cdat[2] = 0xC8;                                         
 847   2                                              txframe.cdat[3] = 0x0C;   
 848   2                                              txframe.cdat[4] = 0x00;                                                 
 849   2                                              txframe.cdat[5] = 0x00; 
 850   2                                              txframe.cdat[6] = 0xC8;
 851   2                                              txframe.cdat[7] = 0x00;           
 852   2                                              tx_can_frame(0);                                
 853   2                              break;
 854   2                              case 3:
 855   2                                              //If(low to high) 
 856   2                                              if(sw_temp > sw)
 857   2                                              {
 858   3                                                      //do sweep from 0x19 to 0x1C (0x19,0x1A,0x1B,0x1C)
 859   3                                                      for(l=0;l<=3;l++)
 860   3                                                      {
 861   4                                                                      shortdelay();
 862   4                                                                      txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
 863   4                                                                      txframe.arbID = 0x2fa;            //Message ID CBC_12                                                                   
 864   4                                                                      txframe.sz = 8;                           //8 bytes
 865   4                                                                      txframe.cdat[0] = 0x00;                                                 
 866   4                                                                      txframe.cdat[1] = 0x00; 
 867   4                                                                      txframe.cdat[2] = (0x68 + (l*5));                                               
 868   4                                                                      txframe.cdat[3] = 0x0C;   
 869   4                                                                      txframe.cdat[4] = 0x00;                                                 
 870   4                                                                      txframe.cdat[5] = 0x00; 
 871   4                                                                      txframe.cdat[6] = (0x68 + (l*5));
 872   4                                                                      txframe.cdat[7] = 0x00;           
 873   4                                                                      tx_can_frame(0);
 874   4                                                                      onehundredms();
 875   4      
 876   4                                                      }
 877   3                                              }
 878   2      
 879   2      
 880   2                                              shortdelay();
 881   2                                              txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
 882   2                                              txframe.arbID = 0x2fa;            //Message ID CBC_12                                                                   
 883   2                                              txframe.sz = 8;                           //8 bytes
 884   2                                              txframe.cdat[0] = 0x00;                                                 
 885   2                                              txframe.cdat[1] = 0x00; 
 886   2                                              txframe.cdat[2] = 0x78;                                         
 887   2                                              txframe.cdat[3] = 0x0C;   
 888   2                                              txframe.cdat[4] = 0x00;                                                 
 889   2                                              txframe.cdat[5] = 0x00; 
 890   2                                              txframe.cdat[6] = 0x78;
 891   2                                              txframe.cdat[7] = 0x00;           
 892   2                                              tx_can_frame(0);                                
 893   2                              break;
 894   2                              case 4:
 895   2      
 896   2                                              //If(low to high) 
 897   2                                              if(sw_temp > sw)
 898   2                                              {
 899   3                                                      //do sweep from 0x14 to 0x17 (0x14,0x15,0x16,0x17)
 900   3                                                      for(l=0;l<=3;l++)
 901   3                                                      {
 902   4                                                                      shortdelay();
 903   4                                                                      txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
 904   4                                                                      txframe.arbID = 0x2fa;            //Message ID CBC_12                                                                   
 905   4                                                                      txframe.sz = 8;                           //8 bytes
 906   4                                                                      txframe.cdat[0] = 0x00;                                                 
 907   4                                                                      txframe.cdat[1] = 0x00; 
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 16  

 908   4                                                                      txframe.cdat[2] = (0x54 + (l*4));                                               
 909   4                                                                      txframe.cdat[3] = 0x0C;   
 910   4                                                                      txframe.cdat[4] = 0x00;                                                 
 911   4                                                                      txframe.cdat[5] = 0x00; 
 912   4                                                                      txframe.cdat[6] = (0x54 + (l*4));
 913   4                                                                      txframe.cdat[7] = 0x00;           
 914   4                                                                      tx_can_frame(0);
 915   4                                                                      onehundredms();
 916   4      
 917   4                                                      }
 918   3                                              }
 919   2      
 920   2                                              //if(high to low)
 921   2                                              else if(sw_temp < sw)
 922   2                                              {
 923   3                                                      //do sweep from 0x1B to 0x19 (0x1B, 0x1A, 0x19)
 924   3                                                      for(l=0;l<=2;l++)
 925   3                                                      {
 926   4                                                                      shortdelay();
 927   4                                                                      txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
 928   4                                                                      txframe.arbID = 0x2fa;            //Message ID CBC_12                                                                   
 929   4                                                                      txframe.sz = 8;                           //8 bytes
 930   4                                                                      txframe.cdat[0] = 0x00;                                                 
 931   4                                                                      txframe.cdat[1] = 0x00; 
 932   4                                                                      txframe.cdat[2] = (0x73 - (l*5));                                               
 933   4                                                                      txframe.cdat[3] = 0x0C;   
 934   4                                                                      txframe.cdat[4] = 0x00;                                                 
 935   4                                                                      txframe.cdat[5] = 0x00; 
 936   4                                                                      txframe.cdat[6] = (0x73 - (l*5));
 937   4                                                                      txframe.cdat[7] = 0x00;           
 938   4                                                                      tx_can_frame(0);
 939   4                                                                      onehundredms();
 940   4      
 941   4                                                      }
 942   3                                              }
 943   2      
 944   2                                              shortdelay();
 945   2                                              txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
 946   2                                              txframe.arbID = 0x2fa;            //Message ID CBC_12                                                                   
 947   2                                              txframe.sz = 8;                           //8 bytes
 948   2                                              txframe.cdat[0] = 0x00;                                                 
 949   2                                              txframe.cdat[1] = 0x00; 
 950   2                                              txframe.cdat[2] = 0x63;                                         
 951   2                                              txframe.cdat[3] = 0x0C;   
 952   2                                              txframe.cdat[4] = 0x00;                                                 
 953   2                                              txframe.cdat[5] = 0x00; 
 954   2                                              txframe.cdat[6] = 0x63;
 955   2                                              txframe.cdat[7] = 0x00;           
 956   2                                              tx_can_frame(0);                                
 957   2                              break;
 958   2                              case 5:
 959   2      
 960   2                                              //If(low to high) 
 961   2                                              if(sw_temp > sw)
 962   2                                              {
 963   3                                                      //do sweep from 0x0F to 0x12 (0x0F,0x10,0x11,0x12)
 964   3      
 965   3                                                      for(l=0;l<=3;l++)
 966   3                                                      {
 967   4                                                                      shortdelay();
 968   4                                                                      txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
 969   4                                                                      txframe.arbID = 0x2fa;            //Message ID CBC_12                                                                   
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 17  

 970   4                                                                      txframe.sz = 8;                           //8 bytes
 971   4                                                                      txframe.cdat[0] = 0x00;                                                 
 972   4                                                                      txframe.cdat[1] = 0x00; 
 973   4                                                                      txframe.cdat[2] = (0x40 + (l*5));                                               
 974   4                                                                      txframe.cdat[3] = 0x0C;   
 975   4                                                                      txframe.cdat[4] = 0x00;                                                 
 976   4                                                                      txframe.cdat[5] = 0x00; 
 977   4                                                                      txframe.cdat[6] = (0x40 + (l*5));
 978   4                                                                      txframe.cdat[7] = 0x00;           
 979   4                                                                      tx_can_frame(0);
 980   4                                                                      onehundredms();
 981   4      
 982   4                                                      }
 983   3                                              }
 984   2      
 985   2                                              //if(high to low)
 986   2                                              else if(sw_temp < sw)
 987   2                                              {
 988   3                                                      //do sweep from 0x17 to 0x14 (0x17, 0x16, 0x15, 0x14)
 989   3                                                      for(l=0;l<=3;l++)
 990   3                                                      {
 991   4                                                                      shortdelay();
 992   4                                                                      txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
 993   4                                                                      txframe.arbID = 0x2fa;            //Message ID CBC_12                                                                   
 994   4                                                                      txframe.sz = 8;                           //8 bytes
 995   4                                                                      txframe.cdat[0] = 0x00;                                                 
 996   4                                                                      txframe.cdat[1] = 0x00; 
 997   4                                                                      txframe.cdat[2] = (0x5F - (l*4));                                               
 998   4                                                                      txframe.cdat[3] = 0x0C;   
 999   4                                                                      txframe.cdat[4] = 0x00;                                                 
1000   4                                                                      txframe.cdat[5] = 0x00; 
1001   4                                                                      txframe.cdat[6] = (0x5F - (l*4));
1002   4                                                                      txframe.cdat[7] = 0x00;           
1003   4                                                                      tx_can_frame(0);
1004   4                                                                      onehundredms();
1005   4                                                      }
1006   3                                              }
1007   2      
1008   2                                              shortdelay();
1009   2                                              txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
1010   2                                              txframe.arbID = 0x2fa;            //Message ID CBC_12                                                                   
1011   2                                              txframe.sz = 8;                           //8 bytes
1012   2                                              txframe.cdat[0] = 0x00;                                                 
1013   2                                              txframe.cdat[1] = 0x00; 
1014   2                                              txframe.cdat[2] = 0x50;                                         
1015   2                                              txframe.cdat[3] = 0x0C;   
1016   2                                              txframe.cdat[4] = 0x00;                                                 
1017   2                                              txframe.cdat[5] = 0x00; 
1018   2                                              txframe.cdat[6] = 0x50;
1019   2                                              txframe.cdat[7] = 0x00;           
1020   2                                              tx_can_frame(0);                                
1021   2                              break;
1022   2                              case 6:
1023   2                                              //If(low to high) 
1024   2                                              if(sw_temp > sw)
1025   2                                              {
1026   3                                                      //do sweep from 0x0B to 0x0D (0x0B,0x0C,0x0D)
1027   3                                                      for(l=0;l<=2;l++)
1028   3                                                      {
1029   4                                                                      shortdelay();
1030   4                                                                      txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
1031   4                                                                      txframe.arbID = 0x2fa;            //Message ID CBC_12                                                                   
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 18  

1032   4                                                                      txframe.sz = 8;                           //8 bytes
1033   4                                                                      txframe.cdat[0] = 0x00;                                                 
1034   4                                                                      txframe.cdat[1] = 0x00; 
1035   4                                                                      txframe.cdat[2] = (0x2E + (l*6));                                               
1036   4                                                                      txframe.cdat[3] = 0x0C;   
1037   4                                                                      txframe.cdat[4] = 0x00;                                                 
1038   4                                                                      txframe.cdat[5] = 0x00; 
1039   4                                                                      txframe.cdat[6] = (0x2E + (l*6));
1040   4                                                                      txframe.cdat[7] = 0x00;           
1041   4                                                                      tx_can_frame(0);
1042   4                                                                      onehundredms();
1043   4                                                      }
1044   3                                              }
1045   2      
1046   2                                              //if(high to low)
1047   2                                              else if(sw_temp < sw)
1048   2                                              {
1049   3                                                      //do sweep from 0x12 to 0x0F (0x12, 0x11, 0x10, 0x0F)
1050   3                                                      for(l=0;l<=3;l++)
1051   3                                                      {
1052   4                                                                      shortdelay();
1053   4                                                                      txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
1054   4                                                                      txframe.arbID = 0x2fa;            //Message ID CBC_12                                                                   
1055   4                                                                      txframe.sz = 8;                           //8 bytes
1056   4                                                                      txframe.cdat[0] = 0x00;                                                 
1057   4                                                                      txframe.cdat[1] = 0x00; 
1058   4                                                                      txframe.cdat[2] = (0x4B - (l*5));                                               
1059   4                                                                      txframe.cdat[3] = 0x0C;   
1060   4                                                                      txframe.cdat[4] = 0x00;                                                 
1061   4                                                                      txframe.cdat[5] = 0x00; 
1062   4                                                                      txframe.cdat[6] = (0x4B - (l*5));
1063   4                                                                      txframe.cdat[7] = 0x00;           
1064   4                                                                      tx_can_frame(0);
1065   4                                                                      onehundredms();
1066   4                                                      }
1067   3                                              }
1068   2      
1069   2                                              shortdelay();
1070   2                                              txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
1071   2                                              txframe.arbID = 0x2fa;            //Message ID CBC_12                                                                   
1072   2                                              txframe.sz = 8;                           //8 bytes
1073   2                                              txframe.cdat[0] = 0x00;                                                 
1074   2                                              txframe.cdat[1] = 0x00; 
1075   2                                              txframe.cdat[2] = 0x3B;                                         
1076   2                                              txframe.cdat[3] = 0x0C;   
1077   2                                              txframe.cdat[4] = 0x00;                                                 
1078   2                                              txframe.cdat[5] = 0x00; 
1079   2                                              txframe.cdat[6] = 0x3B;
1080   2                                              txframe.cdat[7] = 0x00;           
1081   2                                              tx_can_frame(0);                                
1082   2                              break;
1083   2                              case 7:
1084   2                                              //If(low to high) 
1085   2                                              if(sw_temp > sw)
1086   2                                              {
1087   3                                                      //do sweep from 0x06 to 0x09 (0x06,0x07,0x08, 0x09)
1088   3                                                      for(l=0;l<=3;l++)
1089   3                                                      {
1090   4                                                                      shortdelay();
1091   4                                                                      txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
1092   4                                                                      txframe.arbID = 0x2fa;            //Message ID CBC_12                                                                   
1093   4                                                                      txframe.sz = 8;                           //8 bytes
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 19  

1094   4                                                                      txframe.cdat[0] = 0x00;                                                 
1095   4                                                                      txframe.cdat[1] = 0x00; 
1096   4                                                                      txframe.cdat[2] = (0x18 + l*5);                                         
1097   4                                                                      txframe.cdat[3] = 0x0C;   
1098   4                                                                      txframe.cdat[4] = 0x00;                                                 
1099   4                                                                      txframe.cdat[5] = 0x00; 
1100   4                                                                      txframe.cdat[6] = (0x18 + l*5);
1101   4                                                                      txframe.cdat[7] = 0x00;           
1102   4                                                                      tx_can_frame(0);
1103   4                                                                      onehundredms();
1104   4      
1105   4                                                      }
1106   3                                              }
1107   2                                              //if(high to low)
1108   2                                              else if(sw_temp < sw)
1109   2                                              {
1110   3                                                      //do sweep from 0x0D to 0x0B (0x0D, 0x0C, 0x0B)
1111   3                                                      for(l=0;l<=2;l++)
1112   3                                                      {
1113   4                                                                      shortdelay();
1114   4                                                                      txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
1115   4                                                                      txframe.arbID = 0x2fa;            //Message ID CBC_12                                                                   
1116   4                                                                      txframe.sz = 8;                           //8 bytes
1117   4                                                                      txframe.cdat[0] = 0x00;                                                 
1118   4                                                                      txframe.cdat[1] = 0x00; 
1119   4                                                                      txframe.cdat[2] = (0x35 - (l*6));                                               
1120   4                                                                      txframe.cdat[3] = 0x0C;   
1121   4                                                                      txframe.cdat[4] = 0x00;                                                 
1122   4                                                                      txframe.cdat[5] = 0x00; 
1123   4                                                                      txframe.cdat[6] = (0x35 - (l*6));
1124   4                                                                      txframe.cdat[7] = 0x00;           
1125   4                                                                      tx_can_frame(0);
1126   4                                                                      onehundredms();
1127   4      
1128   4                                                      }
1129   3                                              }
1130   2      
1131   2                                              shortdelay();
1132   2                                              txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
1133   2                                              txframe.arbID = 0x2fa;            //Message ID CBC_12                                                                   
1134   2                                              txframe.sz = 8;                           //8 bytes
1135   2                                              txframe.cdat[0] = 0x00;                                                 
1136   2                                              txframe.cdat[1] = 0x00; 
1137   2                                              txframe.cdat[2] = 0x28;                                         
1138   2                                              txframe.cdat[3] = 0x0C;   
1139   2                                              txframe.cdat[4] = 0x00;                                                 
1140   2                                              txframe.cdat[5] = 0x00; 
1141   2                                              txframe.cdat[6] = 0x28;
1142   2                                              txframe.cdat[7] = 0x00;           
1143   2                                              tx_can_frame(0);                                
1144   2                              break;
1145   2                              case 8:
1146   2                                              
1147   2                                              //if(high to low)
1148   2                                              if(sw_temp < sw)
1149   2                                              {
1150   3                                                      //do sweep from 0x09 to 0x06 (0x09, 0x08, 0x07, 0x06)
1151   3                                                      for(l=0;l<=3;l++)
1152   3                                                      {
1153   4                                                                      shortdelay();
1154   4                                                                      txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
1155   4                                                                      txframe.arbID = 0x2fa;            //Message ID CBC_12                                                                   
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 20  

1156   4                                                                      txframe.sz = 8;                           //8 bytes
1157   4                                                                      txframe.cdat[0] = 0x00;                                                 
1158   4                                                                      txframe.cdat[1] = 0x00; 
1159   4                                                                      txframe.cdat[2] = (0x23 - (l*5));                                               
1160   4                                                                      txframe.cdat[3] = 0x0C;   
1161   4                                                                      txframe.cdat[4] = 0x00;                                                 
1162   4                                                                      txframe.cdat[5] = 0x00; 
1163   4                                                                      txframe.cdat[6] = (0x23 - (l*5));
1164   4                                                                      txframe.cdat[7] = 0x00;           
1165   4                                                                      tx_can_frame(0);
1166   4                                                                      onehundredms();
1167   4                                                      }
1168   3                                              }
1169   2      
1170   2                                              shortdelay();
1171   2                                              txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
1172   2                                              txframe.arbID = 0x2fa;            //Message ID CBC_12                                                                   
1173   2                                              txframe.sz = 8;                           //8 bytes
1174   2                                              txframe.cdat[0] = 0x00;                                                 
1175   2                                              txframe.cdat[1] = 0x00; 
1176   2                                              txframe.cdat[2] = 0x13;                                         
1177   2                                              txframe.cdat[3] = 0x0C;   
1178   2                                              txframe.cdat[4] = 0x00;                                                 
1179   2                                              txframe.cdat[5] = 0x00; 
1180   2                                              txframe.cdat[6] = 0x13;
1181   2                                              txframe.cdat[7] = 0x00;           
1182   2                                              tx_can_frame(0);                                
1183   2                              break;
1184   2                              default:
1185   2                                              shortdelay();
1186   2                                              txframe.MsgNum = 10;                      //Message number(sequential starting at 1 for unique messages                                                 
1187   2                                              txframe.arbID = 0x2fa;            //Message ID CBC_12                                                                   
1188   2                                              txframe.sz = 8;                           //8 bytes
1189   2                                              txframe.cdat[0] = 0x00;                                                 
1190   2                                              txframe.cdat[1] = 0x04; 
1191   2                                              txframe.cdat[2] = 0x00;                                         
1192   2                                              txframe.cdat[3] = 0x0C;   
1193   2                                              txframe.cdat[4] = 0x00;                                                 
1194   2                                              txframe.cdat[5] = 0x00; 
1195   2                                              txframe.cdat[6] = 0x00;
1196   2                                              txframe.cdat[7] = 0x00;           
1197   2                                              tx_can_frame(0);                                
1198   2                              }
1199   1      
1200   1                              sw_temp = sw;
1201   1                              
1202   1                              
1203   1      
1204   1      }
1205          
1206          
1207          /*******************************************************
1208          ** Function name: codedelay()                                             **
1209          ** Varibles: NONE                                                                         **
1210          ** Output type:                                                                           **
1211          **                                                                                                        **
1212          **                                                                                                        **
1213          ** Description:                                                                           **
1214          **                                                                                                        **
1215          **                                                                                                        **
1216          **                                                                                                        **
1217          **                                                                                                        **
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 21  

1218          ** Date Modified:                                                                         **
1219          ** Author:                                                                                        **
1220          *******************************************************/
1221          void codedelay(unsigned int delay)      //unsigned in
1222          {
1223   1              while (delay)
1224   1              delay--;
1225   1      } 
1226          
1227          
1228          
1229          /*******************************************************
1230          ** Function name: onehundredms()                                          **
1231          ** Varibles: NONE                                                                         **
1232          ** Output type:                                                                           **
1233          **                                                                                                        **
1234          **                                                                                                        **
1235          ** Description:                                                                           **
1236          **                                                                                                        **
1237          **                                                                                                        **
1238          **                                                                                                        **
1239          **                                                                                                        **
1240          ** Date Modified:                                                                         **
1241          ** Author:                                                                                        **
1242          *******************************************************/
1243          void onehundredms(void)
1244          {
1245   1      
1246   1              
1247   1                                      codedelay(255000);
1248   1                                      codedelay(255000);
1249   1                                      codedelay(245000);
1250   1                                      codedelay(100062);
1251   1      }
1252          
1253          
1254          
1255          /*******************************************************
1256          ** Function name: shortdelay()                                            **
1257          ** Varibles: NONE                                                                         **
1258          ** Output type:                                                                           **
1259          **                                                                                                        **
1260          **                                                                                                        **
1261          ** Description:                                                                           **
1262          **                                                                                                        **
1263          **                                                                                                        **
1264          **                                                                                                        **
1265          **                                                                                                        **
1266          ** Date Modified:                                                                         **
1267          ** Author:                                                                                        **
1268          *******************************************************/
1269          void shortdelay(void)
1270          {
1271   1                                      codedelay(200000);
1272   1      }
1273          
1274          
1275          
1276          /*******************************************************
1277          ** Function name: clear_message_object ()                         **
1278          ** Varibles: NONE                                                                         **
1279          ** Output type:                                                                           **
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 22  

1280          **                                                                                                        **
1281          **                                                                                                        **
1282          ** Description:                                                                           **
1283          **                                                                                                        **
1284          **                                                                                                        **
1285          **                                                                                                        **
1286          **                                                                                                        **
1287          ** Date Modified:                                                                         **
1288          ** Author:                                                                                        **
1289          *******************************************************/
1290          void clear_message_object (unsigned char mesgobj,unsigned char count) 
1291          {
1292   1              SFRPAGE = CAN0_PAGE;
1293   1              CAN0ADR = IF1CMDMSK;                            //Point to Command Mask Register 1
1294   1              CAN0DATL = 0xFF;                                //Set direction to WRITE all IF registers to Msg Obj
1295   1      
1296   1              while (mesgobj < 33 && count)
1297   1              {
1298   2                      CAN0ADR = IF1CMDRQST;                           //Write blank IF registers to GLOBAL msg obj
1299   2                      CAN0DATL = mesgobj;
1300   2                      mesgobj++;
1301   2                      count--;
1302   2              }
1303   1      }       
1304          
1305          
1306          /*******************************************************
1307          ** Function name: init_msg_object_rx ()                           **
1308          ** Varibles: unsigned char MsgNum --                              **
1309          **                       unsigned int arbID     --                                        **
1310          **                                                                                                        **
1311          ** Output type:                                                                           **
1312          **                                                                                                        **
1313          **                                                                                                        **
1314          ** Description:                                                                           **
1315          **                                                                                                        **
1316          **                                                                                                        **
1317          **                                                                                                        **
1318          **                                                                                                        **
1319          ** Date Modified:                                                                         **
1320          ** Author:                                                                                        **
1321          *******************************************************/
1322          void init_msg_object_rx (unsigned char MsgNum,unsigned int arbID) 
1323          {
1324   1              SFRPAGE = CAN0_PAGE;
1325   1              CAN0ADR = IF2CMDMSK;                            // Point to Command Mask 1
1326   1              CAN0DAT = 0x00B8;                               // Set to WRITE, and alter all Msg Obj except ID MASK and data bits
1327   1              CAN0ADR = IF2ARB1;                              // Point to arbitration1 register
1328   1              CAN0DAT = 0x0000;
1329   1              CAN0DAT = (arbID << 2) | 0x8000;
1330   1              CAN0DAT = 0x0480;                               // Msg Cntrl: set RX IE, remote frame function not enabled
1331   1              CAN0ADR = IF2CMDRQST;                           // Point to Command Request reg.
1332   1              CAN0DATL = MsgNum;                              // Select Msg Obj passed into function parameter list --initiates write 
             -to Msg Obj
1333   1                                                                                              // 3-6 CAN clock cycles to move IF register contents to the Msg Obj in CAN RAM.
1334   1      }                         
1335          
1336          
1337          /*******************************************************
1338          ** Function name: check_lang()                                            **
1339          ** Varibles: NONE                                                                         **
1340          ** Output type:                                                                           **
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 23  

1341          **                                                                                                        **
1342          **                                                                                                        **
1343          ** Description:                                                                           **
1344          **                                                                                                        **
1345          **                                                                                                        **
1346          **                                                                                                        **
1347          **                                                                                                        **
1348          ** Date Modified:                                                                         **
1349          ** Author:                                                                                        **
1350          *******************************************************/
1351          void check_lang(void)
1352          {               
1353   1      
1354   1              
1355   1              //This row of if statements checks to see if the data conatins 0A 03 04 which is sent by the lang = ENG r
             -equest
1356   1              if((rxframe[1].cdat[0] == 0x0A) && (rxframe[1].cdat[1] == 0x03) && (rxframe[1].cdat[2] == 0x01))
1357   1              {
1358   2                      flag_eng = 1;
1359   2                      flag_spa = 0;
1360   2                      flag_ger = 0;
1361   2                      flag_fre = 0;
1362   2                      flag_ita = 0;
1363   2                      flag_jap = 0;
1364   2                      flag_chs = 0;
1365   2                      flag_cht = 0;           
1366   2              }
1367   1      
1368   1              //This row of if statements checks to see if the data conatins 0A 03 01 which is sent by the lang = SPA r
             -equest
1369   1              if((rxframe[1].cdat[0] == 0x0A) && (rxframe[1].cdat[1] == 0x03) && (rxframe[1].cdat[2] == 0x09))
1370   1              {
1371   2                      flag_eng = 0;
1372   2                      flag_spa = 0;
1373   2                      flag_ger = 0;
1374   2                      flag_fre = 0;
1375   2                      flag_ita = 0;
1376   2                      flag_jap = 0;
1377   2                      flag_chs = 1;
1378   2                      flag_cht = 0;   
1379   2                              
1380   2                      
1381   2              }
1382   1      
1383   1              
1384   1              /*
1385   1              if((rxframe[1].cdat[0] == 0x0C)) //&& (rxframe[1].cdat[1] == 0x03) && (rxframe[1].cdat[2] == 0x00))
1386   1              {
1387   1                      flag_eng = 0;
1388   1                      flag_spa = 0;
1389   1                      flag_ger = 0;
1390   1                      flag_fre = 1;
1391   1                      flag_ita = 0;
1392   1                      flag_jap = 0;
1393   1                      flag_chs = 0;
1394   1                      flag_cht = 0;           
1395   1              }
1396   1              
1397   1      
1398   1              if((rxframe[1].cdat[0] == 0x0E)) //&& (rxframe[1].cdat[1] == 0x03) && (rxframe[1].cdat[2] == 0x02))
1399   1              {
1400   1                      flag_eng = 0;
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 24  

1401   1                      flag_spa = 0;
1402   1                      flag_ger = 0;
1403   1                      flag_fre = 0;
1404   1                      flag_ita = 0;
1405   1                      flag_jap = 0;
1406   1                      flag_chs = 1;
1407   1                      flag_cht = 0;           
1408   1              }
1409   1      
1410   1              
1411   1              if((rxframe[1].cdat[0] == 0x0A) && (rxframe[1].cdat[1] == 0x03) && (rxframe[1].cdat[2] == 0x03))
1412   1              {
1413   1                      flag_eng = 0;
1414   1                      flag_spa = 0;
1415   1                      flag_ger = 0;
1416   1                      flag_fre = 0;
1417   1                      flag_ita = 1;
1418   1                      flag_jap = 0;
1419   1                      flag_chs = 0;
1420   1                      flag_cht = 0;           
1421   1              }
1422   1              
1423   1              
1424   1              
1425   1              if((rxframe[1].cdat[0] == 0x0A) && (rxframe[1].cdat[1] == 0x03) && (rxframe[1].cdat[2] == 0x05))
1426   1              {
1427   1                      flag_eng = 0;
1428   1                      flag_spa = 0;
1429   1                      flag_ger = 0;
1430   1                      flag_fre = 0;
1431   1                      flag_ita = 0;
1432   1                      flag_jap = 1;
1433   1                      flag_chs = 0;
1434   1                      flag_cht = 0;   
1435   1                              
1436   1                      
1437   1              }
1438   1              
1439   1      
1440   1              if((rxframe[1].cdat[0] == 0x0A) && (rxframe[1].cdat[1] == 0x03) && (rxframe[1].cdat[2] == 0x09))
1441   1              {
1442   1                      flag_eng = 0;
1443   1                      flag_spa = 0;
1444   1                      flag_ger = 0;
1445   1                      flag_fre = 0;
1446   1                      flag_ita = 0;
1447   1                      flag_jap = 0;
1448   1                      flag_chs = 1;
1449   1                      flag_cht = 0;           
1450   1              }
1451   1      
1452   1              
1453   1              if((rxframe[1].cdat[0] == 0x0A) && (rxframe[1].cdat[1] == 0x03) && (rxframe[1].cdat[2] == 0x0E))
1454   1              {
1455   1                      flag_eng = 0;
1456   1                      flag_spa = 0;
1457   1                      flag_ger = 0;
1458   1                      flag_fre = 0;
1459   1                      flag_ita = 0;
1460   1                      flag_jap = 0;
1461   1                      flag_chs = 0;
1462   1                      flag_cht = 1;           
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 25  

1463   1              }
1464   1      
1465   1      
1466   1      
1467   1      
1468   1              
1469   1              */
1470   1      
1471   1              
1472   1      
1473   1      }       
1474          
1475          
1476          /*******************************************************
1477          ** Function name: lang_cfg()                                              **
1478          ** Varibles: NONE                                                                         **
1479          ** Output type:                                                                           **
1480          **                                                                                                        **
1481          **                                                                                                        **
1482          ** Description:                                                                           **
1483          **                                                                                                        **
1484          **                                                                                                        **
1485          **                                                                                                        **
1486          **                                                                                                        **
1487          ** Date Modified:                                                                         **
1488          ** Author:                                                                                        **
1489          *******************************************************/
1490          void lang_cfg(void)
1491          {
1492   1                      
1493   1                      if (flag_eng == 1)                      // Set language configuration based on check_lang() function ---- English
1494   1                      {
1495   2                      shortdelay();
1496   2                      txframe.MsgNum = 12;                      //Message number(sequential starting at 1 for unique messages                                                 
1497   2                      txframe.arbID= 0x332;             //Message ID VR off                                                                   
1498   2                      txframe.sz = 8;                           //8 bytes
1499   2                      txframe.cdat[0] = 0x00;                                                 
1500   2                      txframe.cdat[1] = 0x00; 
1501   2                      txframe.cdat[2] = 0x00;                                         
1502   2                      txframe.cdat[3] = 0x00;   
1503   2                      txframe.cdat[4] = 0x00;                                                 
1504   2                      txframe.cdat[5] = 0x08; 
1505   2                      txframe.cdat[6] = 0x00;
1506   2                      txframe.cdat[7] = 0x00;           
1507   2                      tx_can_frame(0);
1508   2                      }
1509   1                      
1510   1                      /*
1511   1                      if (flag_spa == 1)                      // Set language configuration based on check_lang() function ---- Spanish
1512   1                      {
1513   1                      shortdelay();
1514   1                      txframe.MsgNum = 12;                      //Message number(sequential starting at 1 for unique messages                                                 
1515   1                      txframe.arbID= 0x332;             //Message ID VR off                                                                   
1516   1                      txframe.sz = 8;                           //8 bytes
1517   1                      txframe.cdat[0] = 0x00;                                                 
1518   1                      txframe.cdat[1] = 0x00; 
1519   1                      txframe.cdat[2] = 0x00;   // lever in Park                                      
1520   1                      txframe.cdat[3] = 0x00;   
1521   1                      txframe.cdat[4] = 0x00;                                                 
1522   1                      txframe.cdat[5] = 0x00; 
1523   1                      txframe.cdat[6] = 0x00;
1524   1                      txframe.cdat[7] = 0x00;           
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 26  

1525   1                      tx_can_frame(0);
1526   1                      }
1527   1      
1528   1                      
1529   1                      if (flag_ger == 1)                      // Set language configuration based on check_lang() function ---- Spanish
1530   1                      {
1531   1                      shortdelay();
1532   1                      txframe.MsgNum = 12;                      //Message number(sequential starting at 1 for unique messages                                                 
1533   1                      txframe.arbID= 0x332;             //Message ID VR off                                                                   
1534   1                      txframe.sz = 8;                           //8 bytes
1535   1                      txframe.cdat[0] = 0x00;                                                 
1536   1                      txframe.cdat[1] = 0x00; 
1537   1                      txframe.cdat[2] = 0x00;   // lever in Park                                      
1538   1                      txframe.cdat[3] = 0x00;   
1539   1                      txframe.cdat[4] = 0x00;                                                 
1540   1                      txframe.cdat[5] = 0x00; 
1541   1                      txframe.cdat[6] = 0x00;
1542   1                      txframe.cdat[7] = 0x00;           
1543   1                      tx_can_frame(0);
1544   1                      }
1545   1                      
1546   1      
1547   1                      if (flag_fre == 1)                      // Set language configuration based on check_lang() function ---- French
1548   1                      {
1549   1                      shortdelay();
1550   1                      txframe.MsgNum = 12;                      //Message number(sequential starting at 1 for unique messages                                                 
1551   1                      txframe.arbID= 0x332;             //Message ID VR off                                                                   
1552   1                      txframe.sz = 8;                           //8 bytes
1553   1                      txframe.cdat[0] = 0x00;                                                 
1554   1                      txframe.cdat[1] = 0x00; 
1555   1                      txframe.cdat[2] = 0x00;   // lever in Park                                      
1556   1                      txframe.cdat[3] = 0x00;   
1557   1                      txframe.cdat[4] = 0x00;                                                 
1558   1                      txframe.cdat[5] = 0x00; 
1559   1                      txframe.cdat[6] = 0x00;
1560   1                      txframe.cdat[7] = 0x00;           
1561   1                      tx_can_frame(0);
1562   1                      }
1563   1      
1564   1                      
1565   1                      if (flag_ita == 1)                      // Set language configuration based on check_lang() function ---- English
1566   1                      {
1567   1                      shortdelay();
1568   1                      txframe.MsgNum = 12;                      //Message number(sequential starting at 1 for unique messages                                                 
1569   1                      txframe.arbID= 0x332;             //Message ID VR off                                                                   
1570   1                      txframe.sz = 8;                           //8 bytes
1571   1                      txframe.cdat[0] = 0x00;                                                 
1572   1                      txframe.cdat[1] = 0x00; 
1573   1                      txframe.cdat[2] = 0x00;                                         
1574   1                      txframe.cdat[3] = 0x00;   
1575   1                      txframe.cdat[4] = 0x00;                                                 
1576   1                      txframe.cdat[5] = 0x00; 
1577   1                      txframe.cdat[6] = 0x60;
1578   1                      txframe.cdat[7] = 0x00;           
1579   1                      tx_can_frame(0);
1580   1                      }
1581   1                      
1582   1                      
1583   1                      if (flag_jap == 1)                      // Set language configuration based on check_lang() function ---- Spanish
1584   1                      {
1585   1                      shortdelay();
1586   1                      txframe.MsgNum = 12;                      //Message number(sequential starting at 1 for unique messages                                                 
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 27  

1587   1                      txframe.arbID= 0x49D;             //Message ID VR off                                                                   
1588   1                      txframe.sz = 8;                           //8 bytes
1589   1                      txframe.cdat[0] = 0x00;                                                 
1590   1                      txframe.cdat[1] = 0x00; 
1591   1                      txframe.cdat[2] = 0x00;   // lever in Park                                      
1592   1                      txframe.cdat[3] = 0x00;   
1593   1                      txframe.cdat[4] = 0x00;                                                 
1594   1                      txframe.cdat[5] = 0x00; 
1595   1                      txframe.cdat[6] = 0x50;
1596   1                      txframe.cdat[7] = 0x00;           
1597   1                      tx_can_frame(0,11);
1598   1                      }
1599   1                      */
1600   1      
1601   1                      if (flag_chs == 1)                      // Set language configuration based on check_lang() function ---- Chinese
1602   1                      {
1603   2                      shortdelay();
1604   2                      txframe.MsgNum = 12;                      //Message number(sequential starting at 1 for unique messages                                                 
1605   2                      txframe.arbID= 0x332;             //Message ID VR off                                                                   
1606   2                      txframe.sz = 8;                           //8 bytes
1607   2                      txframe.cdat[0] = 0x00;                                                 
1608   2                      txframe.cdat[1] = 0x00; 
1609   2                      txframe.cdat[2] = 0x00;   // lever in Park                                      
1610   2                      txframe.cdat[3] = 0x00;   
1611   2                      txframe.cdat[4] = 0x00;                                                 
1612   2                      txframe.cdat[5] = 0x48; 
1613   2                      txframe.cdat[6] = 0x00;
1614   2                      txframe.cdat[7] = 0x00;           
1615   2                      tx_can_frame(0);
1616   2                      }
1617   1      
1618   1                      /*
1619   1                      if (flag_cht == 1)                      // Set language configuration based on check_lang() function ---- Spanish
1620   1                      {
1621   1                      shortdelay();
1622   1                      txframe.MsgNum = 12;                      //Message number(sequential starting at 1 for unique messages                                                 
1623   1                      txframe.arbID= 0x49D;             //Message ID VR off                                                                   
1624   1                      txframe.sz = 8;                           //8 bytes
1625   1                      txframe.cdat[0] = 0x00;                                                 
1626   1                      txframe.cdat[1] = 0x00; 
1627   1                      txframe.cdat[2] = 0x00;   // lever in Park                                      
1628   1                      txframe.cdat[3] = 0x00;   
1629   1                      txframe.cdat[4] = 0x00;                                                 
1630   1                      txframe.cdat[5] = 0x00; 
1631   1                      txframe.cdat[6] = 0x90;
1632   1                      txframe.cdat[7] = 0x00;           
1633   1                      tx_can_frame(0,11);
1634   1                      }
1635   1                      */
1636   1      }
1637          
1638          //-----------------------------------------------------------------------------
1639          // ADC0_Init
1640          //-----------------------------------------------------------------------------
1641          //
1642          // Return Value : None
1643          // Parameters   : None
1644          //
1645          // Discription  : Intializes the ADC0for pin AIN3.0, inorder to obtain curent switch position for analog s
             -witch
1646          //
1647          //-----------------------------------------------------------------------------
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 28  

1648          void ADC0_Init (void)
1649          {
1650   1      
1651   1          SFRPAGE = ADC0_PAGE;
1652   1      
1653   1      
1654   1              // ADC0 disabled; normal tracking
1655   1          // mode; ADC0 conversions are initiated
1656   1          // on AD0BUSY; ADC0 data is
1657   1          // right-justified
1658   1          ADC0CN = 0x00;      
1659   1              
1660   1                              
1661   1              // Enable on-chip VREF
1662   1          REF0CN = 0x0F; 
1663   1                                   
1664   1              
1665   1              // Select AIN3.0 pin as ADC mux input
1666   1              // Select AIN3.0 port
1667   1          AMX0SL = 0x06;                      
1668   1          AMX0PRT = 0x10;             
1669   1                                                                        
1670   1      
1671   1              // ADC conversion clock = 2.5MHz, Gain=1
1672   1          ADC0CF = (SYSCLK/SAR_CLK) << 3; 
1673   1                               
1674   1      }
1675          
1676          //-----------------------------------------------------------------------------
1677          // ADC0_Analog_sel
1678          //-----------------------------------------------------------------------------
1679          //
1680          // Return Value : int - current switch number
1681          // Parameters   : None
1682          //
1683          // Discription  : polls ADC0 and calculates current switch position based on the total # of switch positio
             -ns
1684          //
1685          //-----------------------------------------------------------------------------
1686          int ADC0_Analog_sel(void)
1687          {
1688   1      
1689   1              int k;
1690   1      
1691   1              SFRPAGE = ADC0_PAGE;
1692   1      
1693   1              //calculate the voltage increment value based on max value (1023) 
1694   1              //divided by the total # of switch positions
1695   1              sw_inc = 1023/numb;                                                                     
1696   1      
1697   1      
1698   1              // start AD conversion isr train and wait for conversion complete flag (AD0BUSY)
1699   1              ADC0CN |= 0x10;                                                                 
1700   1              while(AD0BUSY != 0);                                                    
1701   1      
1702   1      
1703   1              //retrieve lower 8 bits and higher 2 bits from ADC0 data register 
1704   1              //then combine to get an adc value between 0-1023
1705   1              ResultL = ADC0L;                                                                
1706   1              ResultH = ADC0H;
1707   1              Result = (ResultH << 8) | ResultL;
1708   1              
C51 COMPILER V9.51   LD_PURSUIT                                                            06/16/2016 15:39:55 PAGE 29  

1709   1              //Result = 200*(Result/1023)
1710   1              
1711   1      
1712   1              //check where current polling switch position is at compared to 
1713   1              //the switch increments and total # of switch positions
1714   1              for(k=1; k <= numb; k++)
1715   1              {
1716   2                      if(Result<((k*sw_inc)+(sw_inc/4)))
1717   2                      {
1718   3                              return k;
1719   3                      }
1720   2              }
1721   1      
1722   1              return numb;
1723   1      }
*** WARNING C290 IN LINE 234 OF LD pursuit.c: missing return value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3223    ----
   CONSTANT SIZE    =     17    ----
   XDATA SIZE       =    449    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     66      24
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
